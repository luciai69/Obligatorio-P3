***********************************
Archivo: PapeleriaContext.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\EF\PapeleriaContext.cs
***********************************
using LogicaAccesoDatos.EF.Config;
using LogicaNegocio.Entidades;
using Microsoft.EntityFrameworkCore;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace LogicaAccesoDatos.EF
{
    public class PapeleriaContext : DbContext
    {
        public DbSet<Articulo> Articulos { get; set; }
        public DbSet<Usuario> Usuarios { get; set; }
        public DbSet<Administrador> Administradores { get; set; }
        public DbSet<Cliente> Clientes { get; set; }
        public DbSet<Pedido> Pedidos { get; set; }
        public DbSet<PedidoComun> PedidosComunes { get; set; }
        public DbSet<PedidoExpress> PedidosExpress { get; set; }



        //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //    {
        //        base.OnConfiguring(optionsBuilder);
        //        optionsBuilder.UseSqlServer(@"Data Source = (localdb)\MSSQLLocalDB; Initial Catalog = papeleria; Integrated Security = True");

        //    }
        public PapeleriaContext(DbContextOptions<PapeleriaContext> options) : base(options) { }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            modelBuilder.ApplyConfiguration(new PedidoConfig());
            modelBuilder.ApplyConfiguration(new ClienteConfig());
            modelBuilder.ApplyConfiguration(new UsuarioConfig()); 
            modelBuilder.ApplyConfiguration(new ArticuloConfig());

            base.OnModelCreating(modelBuilder);
        }
    }
}

***********************************
Archivo: RepositorioArticulo.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\EF\RepositorioArticulo.cs
***********************************
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.Entidades;
using LogicaAccesoDatos.Excepciones;

namespace LogicaAccesoDatos.EF
{
    public class RepositorioArticulo : IRepositorioArticulo
    {
        private PapeleriaContext _context;

        public RepositorioArticulo (PapeleriaContext papeleriaContext)
        {
            _context = papeleriaContext;
        }

        public void Add(Articulo obj)
        {
            if (obj == null)
            {
                throw new ArgumentNullRepositorioException();
            }
            obj.Validar();
            
            Articulo obj2 = GetByName(obj.Nombre);

            if (obj2 != null)
            {
                throw new InformacionRepetidaException(); 
            }

            Articulo obj3 = GetByCodigo(obj.Codigo);
            
            if(obj3 != null)
            {
                throw new InformacionRepetidaException();
            }

            _context.Articulos.Add(obj);
            _context.SaveChanges();
        }

        public void Delete(int id)
        {
            Articulo articulo = GetById(id);

            if (articulo == null)
            {
                throw new ArgumentNullRepositorioException();
            }
            _context.Articulos.Remove(articulo);
            _context.SaveChanges();
        }

        public IEnumerable<Articulo> GetAll()
        {
            return _context.Articulos.ToList();
        }

        public Articulo GetById(int id)
        {
            return _context.Articulos.FirstOrDefault(articulo => articulo.Id == id);
        }

        public Articulo GetByCodigo(string num)
        {
            return _context.Articulos.FirstOrDefault(articulo => articulo.Codigo == num);
        }

        public Articulo GetByName(string name)
        {
            return _context.Articulos.FirstOrDefault(articulo => articulo.Nombre == name);
        }

        public void Update(int id, Articulo obj)
        {
            Articulo articulo = GetById(id);
            if(articulo == null)
            {
                throw new NotFoundException();
            }
            articulo.Update(obj);
            _context.Articulos.Update(articulo);
            _context.SaveChanges(true);
        }
    }
}

***********************************
Archivo: RepositorioCliente.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\EF\RepositorioCliente.cs
***********************************
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace LogicaAccesoDatos.EF
{
    public class RepositorioCliente : IRepositorioCliente
    {
        private PapeleriaContext _context;

        public RepositorioCliente(PapeleriaContext papeleriaContext)
        {
            _context = papeleriaContext;
        }


        public void Add(Cliente obj)
        {
            throw new NotImplementedException();
        }

        public void Delete(int id)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Cliente> GetAll()
        {
            return _context.Clientes.
                AsEnumerable().
                ToList();
        }

        public Cliente GetById(int id)
        {
            return _context.Clientes.FirstOrDefault(cliente => cliente.Id == id);
        }

        public IEnumerable<Cliente> GetByMonto(int monto)
        {
            var clientes = _context.Clientes
                .Where(cli => cli.Pedidos
                .Any(ped => ped.MontoTotal >= monto))
                .OrderBy(cli => cli.Rut);
            return clientes.ToList();
        }


        public void Update(int id, Cliente obj)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Cliente> GetByString(string dato) 
        {
            var clientes = _context.Clientes
                .Where(cli => cli.RazonSoc.ToLower().Contains(dato.ToLower()));
            return clientes.ToList();
        }
    }
}

***********************************
Archivo: RepositorioPedido.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\EF\RepositorioPedido.cs
***********************************
using LogicaAccesoDatos.Excepciones;
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.EF
{
    public class RepositorioPedido : IRepositorioPedido
    {
        private PapeleriaContext _context;

        public RepositorioPedido(PapeleriaContext papeleriaContext)
        {
            _context = papeleriaContext;
        }

        public void Add(Pedido obj)
        {
            if (obj == null)
            {
                throw new ArgumentNullRepositorioException();
            }
            obj.Validar();
            _context.Pedidos.Add(obj);
            obj.CalcularRecargo();
            _context.SaveChanges();
        }

        public void Delete(int id)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Pedido> GetAll()
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Pedido> GetByDate(DateTime dato)
        {
            var pedidos = _context.Pedidos
                 .Where(p => p.FechaRealizado.Date == dato.Date && p.Anulado == false && p.FechaEntrega.Date >= DateTime.Now.Date)
                 .Include(cli => cli.Cliente)
                 .AsEnumerable().
                  ToList();
            return pedidos;


        }

        public Pedido GetById(int id)
        {
            return _context.Pedidos.FirstOrDefault(pedido => pedido.Id == id);
        }

        public void Anular(int id)
        {
            Pedido pedido = GetById(id);
            if (pedido == null)
            {
                throw new NotFoundException();
            }
            pedido.Anular();
            _context.Pedidos.Update(pedido);
            _context.SaveChanges(true);
        }


        public IEnumerable<Pedido> GetByBool(bool dato)
        {
            var pedidos = _context.Pedidos
                 .Where(p => p.Anulado == dato)
                 .Include(cli => cli.Cliente)
                 .OrderByDescending(p => p.FechaRealizado)
                 .AsEnumerable()
                 .ToList();
            return pedidos;
        }

        public void Update(int id, Pedido obj)
        {
            throw new NotImplementedException();
        }
    }
}

***********************************
Archivo: RepositorioUsuario.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\EF\RepositorioUsuario.cs
***********************************
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.Entidades;
using LogicaAccesoDatos.Excepciones;
using LogicaNegocio.Excepciones.Usuario;

namespace LogicaAccesoDatos.EF
{
    public class RepositorioUsuario : IRepositorioUsuario
    {
        private PapeleriaContext _context;

        public RepositorioUsuario(PapeleriaContext papeleriaContext)
        {
            _context = papeleriaContext;
        }

        public void Add(Usuario obj)
        {
            if (obj == null)
            {
                throw new ArgumentNullRepositorioException();
            }
            if(GetByEmail(obj.Mail) != null)
            {
                throw new InformacionRepetidaException();
            }
            obj.Validar();
            _context.Usuarios.Add(obj);
            _context.SaveChanges();
        }

        public void Delete(int id)
        {
            Usuario usuario = GetById(id);

            if (usuario == null)
            {
                throw new ArgumentNullRepositorioException();
            }
            _context.Usuarios.Remove(usuario);
            _context.SaveChanges();
        }

        public IEnumerable<Usuario> GetAll()
        {
            return _context.Usuarios.
                AsEnumerable().
                ToList();
        }

        public Usuario Login(string email, string password)
        {
            Usuario usuario = GetByEmail(email);

            if (usuario == null)
            {
                throw new UsuarioNullException();
            }
            else if (usuario.ContraseniaEncripada != password)
            {
                throw new UsuarioNullException();
            }
            else{
                return usuario;
            }
        }

        public Usuario GetById(int id)
        {
            return _context.Usuarios.FirstOrDefault(usuario => usuario.Id == id);
        }

        public Usuario GetByEmail(string email)
        {
            return _context.Usuarios.FirstOrDefault(usuario => usuario.Mail == email);
        }
        public void Update(int id, Usuario obj)
        {
            Usuario usuario = GetById(id);
            if (usuario == null)
            {
                throw new NotFoundException();
            }
            usuario.Update(obj);
            _context.Usuarios.Update(usuario);
            _context.SaveChanges(true);
        }
    }
}

***********************************
Archivo: SeedBackup.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\EF\SeedBackup.cs
***********************************
using Microsoft.EntityFrameworkCore.Migrations;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.EF
{
    internal class SeedBackup
    {
        //        migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 1, "luciaibarburu@hotmail.com", "Lucia", "Ibarburu", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 2, "marioibarburu@hotmail.com", "Mario", "Ibarburu", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 3, "laurita@gmail.com", "Laura", "Perez", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 4, "evanw@outlook.com", "Evan", "Warwick", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 5, "betinag@outlook.es", "Betina", "Guido", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 6, "faculeiva@outlook.com", "Facundo", "Leiva", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 7, "claudia45@outlook.com", "Claudia", "Martinez", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 8, "nose2349@outlook.com", "Roberta", "Alto", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 9, "alamos98@outlook.com", "Carlos", "Alamo", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
        //migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 10, "pedropedro@outlook.com", "Pedro", "Juanes", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });

        //migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 1, "Restaurantes McDonald's S.A.", "128503869361", "Rivera", "1894", "Montevideo", 5 });
        //migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 2, "Banco Bilbao Vizcaya Argentaria S.A.", "583950310843", "18 de Julio", "895", "Montevideo", 7 });
        //migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 3, "BMW Ibérica S.A.", "685940321865", "Celedonio Rojas", "145", "Maldonado", 135 });
        //migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 4, "Punto FA S.L.", "958208515964", "Quebracho", "2719", "Montevideo", 10 });
        //migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 5, "Air Europa Líneas Aéreas S.A.", "057312769083", "19 de Abril", "1205", "Rocha", 200 });
        //migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 6, "PepsiCo, Inc.", "834206589612", "Bolivar", "1439", "Paysandú", 380 });
        //migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 7, "Grupo Fernández, S.A.", "254382106958", "20 de Setiembre", "1445", "Montevideo", 15 });
        //migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 8, "Importaciones PFV.", "957483295412", "Cuareim", "1451", "Montevideo", 2 });
        //migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 9, "Antic S.A.", "549583950305", "Atanasio Sierra", "1186", "Treinta y Tres", 288 });
        //migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 10, "Barenof S.A.", "124913086743", "Nueva California", "1653", "Montevideo", 30 });

        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 1, "Pintura Acrílica Cintilante", "Pintura PVA de 100 ml con partículas brillantes con efecto reluciente para trabajos hechos a mano.", "9458143291564", 160, 200 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 2, "Marcador Mop'r", "POSCA es un marcador a base de pintura popular entre artistas y aficionados creativos.", "5832106549382", 700, 600 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 3, "Set Pinceles Sinoart", "18 cepillos de nailon de mango corto, 9 de cada uno, redondos y planos.", "0674861295364", 743, 100 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 4, "Cuadernola Con Espiral", "Cuadernola Con Espiral Tapa Dura Diseño Barbie 200 Hojas.", "7439716532865", 599, 200 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 5, "Cuadernola Cosida", "Cuadernola Class Tapa Dura Cosida 96 Hojas Color Verde.", "0768143765814", 299, 100 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 6, "Marcador Stabilo", "Marcador Stabilo PointMax Fineliners Pack x4 Resaltadores.", "5186230641853", 509, 50 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 7, "Cartuchera Completa", "Incluye: colores, marcadores, sacapunta y goma.", "7861943816386", 720, 70 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 8, "Papelera Metálica Neox", "Fabricada en metal calado negro. Medidas: 28 x 29 cm.", "9781523613251", 360, 20 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 9, "Set De Aprieta Papel", "Pack de aprieta papeles con diseños. Sistema doble clip de acero resistente.", "9619874975812", 155, 120 });
        //migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 10, "Clips Para Hojas Papel", "Caja clips para hojas papel 33mm. 100 Unidades, Centrum.", "7684912038613", 50, 30 });

        //migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 1, "2024-05-15 11:14:39", 9, "2024-05-17 00:00:00", 1560, 2093.52, 3, false, "PedidoExpress" });
        //migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 2, "2024-05-15 11:15:08", 2, "2024-05-23 00:00:00", 3082, 3760.04, 8, false, "PedidoComun" });
        //migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 3, "2024-05-15 11:29:43", 5, "2024-05-17 00:00:00", 1783, 2392.786, 4, false, "PedidoExpress" });
        //migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 4, "2024-05-15 11:30:13", 8, "2024-05-20 00:00:00", 3108, 4170.9360000000006, 9, false, "PedidoExpress" });
        //migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 5, "2024-05-15 11:30:52", 1, "2024-05-24 00:00:00", 5896, 7193.12, 12, false, "PedidoComun" });
        //migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 6, "2024-05-15 11:31:41", 10, "2024-05-24 00:00:00", 7755, 9461.1, 23, false, "PedidoComun" });
        //migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 7, "2024-05-15 11:33:26", 3, "2024-05-19 00:00:00", 10740, 14413.08, 60, false, "PedidoExpress" });
        //migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 8, "2024-05-15 11:33:52", 4, "2024-05-28 00:00:00", 10487, 12794.14, 18, false, "PedidoComun" });
        //migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 9, "2024-05-15 11:34:22", 7, "2024-05-19 00:00:00", 2409, 3232.878, 10, false, "PedidoExpress" });
        //migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 10, "2024-05-15 11:34:48", 6, "2024-05-29 00:00:00", 6472, 8290.6320000000014, 12, false, "PedidoComun" });

//        migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 1, 1, 1, 160, 1 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 2, 2, 2, 700, 1 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 3, 1, 1, 160, 2 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 4, 2, 2, 700, 2 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 5, 1, 3, 160, 2 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 6, 3, 1, 743, 2 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 7, 5, 1, 299, 2 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 8, 1, 2, 160, 3 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 9, 3, 1, 743, 3 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 10, 7, 1, 720, 3 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 11, 2, 3, 700, 4 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 12, 5, 2, 299, 4 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 13, 9, 2, 155, 4 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 14, 10, 2, 50, 4 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 15, 6, 5, 509, 5 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 16, 3, 2, 743, 5 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 17, 9, 3, 155, 5 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 18, 2, 2, 700, 5 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 19, 7, 8, 720, 6 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 20, 10, 10, 50, 6 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 21, 5, 5, 299, 6 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 22, 9, 50, 155, 7 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 23, 5, 10, 299, 7 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 24, 4, 10, 599, 8 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 25, 5, 3, 299, 8 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 26, 7, 5, 720, 8 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 27, 10, 3, 50, 9 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 28, 9, 2, 155, 9 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 29, 8, 4, 360, 9 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 30, 6, 1, 509, 9 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 31, 7, 4, 720, 10 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 32, 5, 4, 299, 10 });
//migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 33, 4, 4, 599, 10 });
    }
}

***********************************
Archivo: ArgumentNullRepositorioException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\Excepciones\ArgumentNullRepositorioException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.Excepciones
{
    public class ArgumentNullRepositorioException : RepositorioException
    {
        public ArgumentNullRepositorioException() : base("No se recibió información.") { }

    }
}

***********************************
Archivo: InformacionRepetidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\Excepciones\InformacionRepetidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.Excepciones
{
    internal class InformacionRepetidaException : RepositorioException
    {
        public InformacionRepetidaException() : base("No se pueden utilizar datos repetidos.") { }
    
    }
}

***********************************
Archivo: NotFoundException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\Excepciones\NotFoundException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.Excepciones
{
    public class NotFoundException : RepositorioException
    {
        public NotFoundException() : base("No se encontró la información solicitada.") { }

    }
}

***********************************
Archivo: RepositorioException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\Excepciones\RepositorioException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.Excepciones
{
    public class RepositorioException : Exception
    {
        public RepositorioException() { }
        public RepositorioException(string message) : base(message) { }
    }
}

***********************************
Archivo: 20240515155927_init.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\Migrations\20240515155927_init.cs
***********************************
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace LogicaAccesoDatos.Migrations
{
    /// <inheritdoc />
    public partial class init : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Articulos",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Descripcion = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Codigo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Precio = table.Column<double>(type: "float", nullable: false),
                    Stock = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Articulos", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RazonSoc = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Rut = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Direccion_calle = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Direccion_num = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Direccion_ciudad = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Direccion_distPapeleria = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Clientes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Usuarios",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Mail = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    NombreCompleto_nombre = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    NombreCompleto_apellido = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Contrasenia = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ContraseniaEncripada = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Discriminator = table.Column<string>(type: "nvarchar(13)", maxLength: 13, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Usuarios", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Pedidos",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FechaRealizado = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ClienteId = table.Column<int>(type: "int", nullable: false),
                    FechaEntrega = table.Column<DateTime>(type: "datetime2", nullable: false),
                    MontoSubtotal = table.Column<double>(type: "float", nullable: false),
                    MontoTotal = table.Column<double>(type: "float", nullable: false),
                    Cantidad = table.Column<int>(type: "int", nullable: false),
                    Anulado = table.Column<bool>(type: "bit", nullable: false),
                    Discriminator = table.Column<string>(type: "nvarchar(13)", maxLength: 13, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Pedidos", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Pedidos_Clientes_ClienteId",
                        column: x => x.ClienteId,
                        principalTable: "Clientes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Linea",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ArticuloId = table.Column<int>(type: "int", nullable: false),
                    CantUnidades = table.Column<int>(type: "int", nullable: false),
                    PrecioUnitarioVigente = table.Column<double>(type: "float", nullable: false),
                    PedidoId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Linea", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Linea_Articulos_ArticuloId",
                        column: x => x.ArticuloId,
                        principalTable: "Articulos",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Linea_Pedidos_PedidoId",
                        column: x => x.PedidoId,
                        principalTable: "Pedidos",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateIndex(
                name: "IX_Articulos_Nombre",
                table: "Articulos",
                column: "Nombre",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Clientes_Rut",
                table: "Clientes",
                column: "Rut",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Linea_ArticuloId",
                table: "Linea",
                column: "ArticuloId");

            migrationBuilder.CreateIndex(
                name: "IX_Linea_PedidoId",
                table: "Linea",
                column: "PedidoId");

            migrationBuilder.CreateIndex(
                name: "IX_Pedidos_ClienteId",
                table: "Pedidos",
                column: "ClienteId");

            migrationBuilder.CreateIndex(
                name: "IX_Usuarios_Mail",
                table: "Usuarios",
                column: "Mail",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Linea");

            migrationBuilder.DropTable(
                name: "Usuarios");

            migrationBuilder.DropTable(
                name: "Articulos");

            migrationBuilder.DropTable(
                name: "Pedidos");

            migrationBuilder.DropTable(
                name: "Clientes");
        }
    }
}

***********************************
Archivo: 20240515155927_init.Designer.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\Migrations\20240515155927_init.Designer.cs
***********************************
// <auto-generated />
using System;
using LogicaAccesoDatos.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogicaAccesoDatos.Migrations
{
    [DbContext(typeof(PapeleriaContext))]
    [Migration("20240515155927_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LogicaNegocio.Entidades.Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RazonSoc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Rut")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Linea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<int>("CantUnidades")
                        .HasColumnType("int");

                    b.Property<int?>("PedidoId")
                        .HasColumnType("int");

                    b.Property<double>("PrecioUnitarioVigente")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("PedidoId");

                    b.ToTable("Linea");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRealizado")
                        .HasColumnType("datetime2");

                    b.Property<double>("MontoSubtotal")
                        .HasColumnType("float");

                    b.Property<double>("MontoTotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pedidos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pedido");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContraseniaEncripada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Mail")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.PedidoComun", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Pedido");

                    b.HasDiscriminator().HasValue("PedidoComun");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.PedidoExpress", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Pedido");

                    b.HasDiscriminator().HasValue("PedidoExpress");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Administrador", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Usuario");

                    b.HasDiscriminator().HasValue("Administrador");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.OwnsOne("LogicaNegocio.ValueObjects.Direccion", "Direccion", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("int");

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Direccion_calle");

                            b1.Property<string>("Ciudad")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Direccion_ciudad");

                            b1.Property<int>("DistanciaPapeleria")
                                .HasColumnType("int")
                                .HasColumnName("Direccion_distPapeleria");

                            b1.Property<string>("Num")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Direccion_num");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Direccion")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Linea", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("ArticuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.Entidades.Pedido", null)
                        .WithMany("Lineas")
                        .HasForeignKey("PedidoId");

                    b.Navigation("Articulo");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Usuario", b =>
                {
                    b.OwnsOne("LogicaNegocio.ValueObjects.NombreCompleto", "NombreCompleto", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("int");

                            b1.Property<string>("Apellido")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NombreCompleto_apellido");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NombreCompleto_nombre");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("NombreCompleto")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.Navigation("Lineas");
                });
#pragma warning restore 612, 618
        }
    }
}

***********************************
Archivo: 20240515155939_seedData.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\Migrations\20240515155939_seedData.cs
***********************************
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace LogicaAccesoDatos.Migrations
{
    /// <inheritdoc />
    public partial class seedData : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 1, "luciaibarburu@hotmail.com", "Lucia", "Ibarburu", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 2, "marioibarburu@hotmail.com", "Mario", "Ibarburu", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 3, "laurita@gmail.com", "Laura", "Perez", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 4, "evanw@outlook.com", "Evan", "Warwick", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 5, "betinag@outlook.es", "Betina", "Guido", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 6, "faculeiva@outlook.com", "Facundo", "Leiva", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 7, "claudia45@outlook.com", "Claudia", "Martinez", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 8, "nose2349@outlook.com", "Roberta", "Alto", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 9, "alamos98@outlook.com", "Carlos", "Alamo", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });
            migrationBuilder.InsertData("Usuarios", new[] { "Id", "Mail", "NombreCompleto_nombre", "NombreCompleto_apellido", "Contrasenia", "ContraseniaEncripada", "Discriminator" }, new object[] { 10, "pedropedro@outlook.com", "Pedro", "Juanes", "1234Aa!", "MTIzNEFhIQ==", "Administrador" });

            migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 1, "Restaurantes McDonald's S.A.", "128503869361", "Rivera", "1894", "Montevideo", 5 });
            migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 2, "Banco Bilbao Vizcaya Argentaria S.A.", "583950310843", "18 de Julio", "895", "Montevideo", 7 });
            migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 3, "BMW Ibérica S.A.", "685940321865", "Celedonio Rojas", "145", "Maldonado", 135 });
            migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 4, "Punto FA S.L.", "958208515964", "Quebracho", "2719", "Montevideo", 10 });
            migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 5, "Air Europa Líneas Aéreas S.A.", "057312769083", "19 de Abril", "1205", "Rocha", 200 });
            migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 6, "PepsiCo, Inc.", "834206589612", "Bolivar", "1439", "Paysandú", 380 });
            migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 7, "Grupo Fernández, S.A.", "254382106958", "20 de Setiembre", "1445", "Montevideo", 15 });
            migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 8, "Importaciones PFV.", "957483295412", "Cuareim", "1451", "Montevideo", 2 });
            migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 9, "Antic S.A.", "549583950305", "Atanasio Sierra", "1186", "Treinta y Tres", 288 });
            migrationBuilder.InsertData("Clientes", new[] { "Id", "RazonSoc", "Rut", "Direccion_calle", "Direccion_num", "Direccion_ciudad", "Direccion_distPapeleria" }, new object[] { 10, "Barenof S.A.", "124913086743", "Nueva California", "1653", "Montevideo", 30 });

            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 1, "Pintura Acrílica Cintilante", "Pintura PVA de 100 ml con partículas brillantes con efecto reluciente para trabajos hechos a mano.", "9458143291564", 160, 200 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 2, "Marcador Mop'r", "POSCA es un marcador a base de pintura popular entre artistas y aficionados creativos.", "5832106549382", 700, 600 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 3, "Set Pinceles Sinoart", "18 cepillos de nailon de mango corto, 9 de cada uno, redondos y planos.", "0674861295364", 743, 100 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 4, "Cuadernola Con Espiral", "Cuadernola Con Espiral Tapa Dura Diseño Barbie 200 Hojas.", "7439716532865", 599, 200 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 5, "Cuadernola Cosida", "Cuadernola Class Tapa Dura Cosida 96 Hojas Color Verde.", "0768143765814", 299, 100 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 6, "Marcador Stabilo", "Marcador Stabilo PointMax Fineliners Pack x4 Resaltadores.", "5186230641853", 509, 50 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 7, "Cartuchera Completa", "Incluye: colores, marcadores, sacapunta y goma.", "7861943816386", 720, 70 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 8, "Papelera Metálica Neox", "Fabricada en metal calado negro. Medidas: 28 x 29 cm.", "9781523613251", 360, 20 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 9, "Set De Aprieta Papel", "Pack de aprieta papeles con diseños. Sistema doble clip de acero resistente.", "9619874975812", 155, 120 });
            migrationBuilder.InsertData("Articulos", new[] { "Id", "Nombre", "Descripcion", "Codigo", "Precio", "Stock" }, new object[] { 10, "Clips Para Hojas Papel", "Caja clips para hojas papel 33mm. 100 Unidades, Centrum.", "7684912038613", 50, 30 });

            migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 1, "2024-05-15 11:14:39", 9, "2024-05-17 00:00:00", 1560, 2093.52, 3, false, "PedidoExpress" });
            migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 2, "2024-05-15 11:15:08", 2, "2024-05-23 00:00:00", 3082, 3760.04, 8, false, "PedidoComun" });
            migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 3, "2024-05-15 11:29:43", 5, "2024-05-17 00:00:00", 1783, 2392.786, 4, false, "PedidoExpress" });
            migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 4, "2024-05-15 11:30:13", 8, "2024-05-20 00:00:00", 3108, 4170.9360000000006, 9, false, "PedidoExpress" });
            migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 5, "2024-05-15 11:30:52", 1, "2024-05-24 00:00:00", 5896, 7193.12, 12, false, "PedidoComun" });
            migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 6, "2024-05-15 11:31:41", 10, "2024-05-24 00:00:00", 7755, 9461.1, 23, false, "PedidoComun" });
            migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 7, "2024-05-15 11:33:26", 3, "2024-05-19 00:00:00", 10740, 14413.08, 60, false, "PedidoExpress" });
            migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 8, "2024-05-15 11:33:52", 4, "2024-05-28 00:00:00", 10487, 12794.14, 18, false, "PedidoComun" });
            migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 9, "2024-05-15 11:34:22", 7, "2024-05-19 00:00:00", 2409, 3232.878, 10, false, "PedidoExpress" });
            migrationBuilder.InsertData("Pedidos", new[] { "Id", "FechaRealizado", "ClienteId", "FechaEntrega", "MontoSubtotal", "MontoTotal", "Cantidad", "Anulado", "Discriminator" }, new object[] { 10, "2024-05-15 11:34:48", 6, "2024-05-29 00:00:00", 6472, 8290.6320000000014, 12, false, "PedidoComun" });

            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 1, 1, 1, 160, 1 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 2, 2, 2, 700, 1 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 3, 1, 1, 160, 2 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 4, 2, 2, 700, 2 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 5, 1, 3, 160, 2 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 6, 3, 1, 743, 2 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 7, 5, 1, 299, 2 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 8, 1, 2, 160, 3 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 9, 3, 1, 743, 3 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 10, 7, 1, 720, 3 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 11, 2, 3, 700, 4 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 12, 5, 2, 299, 4 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 13, 9, 2, 155, 4 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 14, 10, 2, 50, 4 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 15, 6, 5, 509, 5 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 16, 3, 2, 743, 5 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 17, 9, 3, 155, 5 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 18, 2, 2, 700, 5 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 19, 7, 8, 720, 6 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 20, 10, 10, 50, 6 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 21, 5, 5, 299, 6 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 22, 9, 50, 155, 7 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 23, 5, 10, 299, 7 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 24, 4, 10, 599, 8 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 25, 5, 3, 299, 8 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 26, 7, 5, 720, 8 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 27, 10, 3, 50, 9 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 28, 9, 2, 155, 9 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 29, 8, 4, 360, 9 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 30, 6, 1, 509, 9 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 31, 7, 4, 720, 10 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 32, 5, 4, 299, 10 });
            migrationBuilder.InsertData("Linea", new[] { "Id", "ArticuloId", "CantUnidades", "PrecioUnitarioVigente", "PedidoId" }, new object[] { 33, 4, 4, 599, 10 });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}

***********************************
Archivo: 20240515155939_seedData.Designer.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\Migrations\20240515155939_seedData.Designer.cs
***********************************
// <auto-generated />
using System;
using LogicaAccesoDatos.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogicaAccesoDatos.Migrations
{
    [DbContext(typeof(PapeleriaContext))]
    [Migration("20240515155939_seedData")]
    partial class seedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LogicaNegocio.Entidades.Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RazonSoc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Rut")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Linea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<int>("CantUnidades")
                        .HasColumnType("int");

                    b.Property<int?>("PedidoId")
                        .HasColumnType("int");

                    b.Property<double>("PrecioUnitarioVigente")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("PedidoId");

                    b.ToTable("Linea");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRealizado")
                        .HasColumnType("datetime2");

                    b.Property<double>("MontoSubtotal")
                        .HasColumnType("float");

                    b.Property<double>("MontoTotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pedidos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pedido");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContraseniaEncripada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Mail")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.PedidoComun", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Pedido");

                    b.HasDiscriminator().HasValue("PedidoComun");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.PedidoExpress", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Pedido");

                    b.HasDiscriminator().HasValue("PedidoExpress");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Administrador", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Usuario");

                    b.HasDiscriminator().HasValue("Administrador");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.OwnsOne("LogicaNegocio.ValueObjects.Direccion", "Direccion", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("int");

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Direccion_calle");

                            b1.Property<string>("Ciudad")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Direccion_ciudad");

                            b1.Property<int>("DistanciaPapeleria")
                                .HasColumnType("int")
                                .HasColumnName("Direccion_distPapeleria");

                            b1.Property<string>("Num")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Direccion_num");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Direccion")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Linea", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("ArticuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.Entidades.Pedido", null)
                        .WithMany("Lineas")
                        .HasForeignKey("PedidoId");

                    b.Navigation("Articulo");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Usuario", b =>
                {
                    b.OwnsOne("LogicaNegocio.ValueObjects.NombreCompleto", "NombreCompleto", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("int");

                            b1.Property<string>("Apellido")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NombreCompleto_apellido");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NombreCompleto_nombre");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("NombreCompleto")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.Navigation("Lineas");
                });
#pragma warning restore 612, 618
        }
    }
}

***********************************
Archivo: PapeleriaContextModelSnapshot.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\Migrations\PapeleriaContextModelSnapshot.cs
***********************************
// <auto-generated />
using System;
using LogicaAccesoDatos.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogicaAccesoDatos.Migrations
{
    [DbContext(typeof(PapeleriaContext))]
    partial class PapeleriaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LogicaNegocio.Entidades.Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RazonSoc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Rut")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Linea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticuloId")
                        .HasColumnType("int");

                    b.Property<int>("CantUnidades")
                        .HasColumnType("int");

                    b.Property<int?>("PedidoId")
                        .HasColumnType("int");

                    b.Property<double>("PrecioUnitarioVigente")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ArticuloId");

                    b.HasIndex("PedidoId");

                    b.ToTable("Linea");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRealizado")
                        .HasColumnType("datetime2");

                    b.Property<double>("MontoSubtotal")
                        .HasColumnType("float");

                    b.Property<double>("MontoTotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pedidos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pedido");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContraseniaEncripada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Mail")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.PedidoComun", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Pedido");

                    b.HasDiscriminator().HasValue("PedidoComun");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.PedidoExpress", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Pedido");

                    b.HasDiscriminator().HasValue("PedidoExpress");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Administrador", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Usuario");

                    b.HasDiscriminator().HasValue("Administrador");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.OwnsOne("LogicaNegocio.ValueObjects.Direccion", "Direccion", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("int");

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Direccion_calle");

                            b1.Property<string>("Ciudad")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Direccion_ciudad");

                            b1.Property<int>("DistanciaPapeleria")
                                .HasColumnType("int")
                                .HasColumnName("Direccion_distPapeleria");

                            b1.Property<string>("Num")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Direccion_num");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Direccion")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Linea", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("ArticuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.Entidades.Pedido", null)
                        .WithMany("Lineas")
                        .HasForeignKey("PedidoId");

                    b.Navigation("Articulo");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Usuario", b =>
                {
                    b.OwnsOne("LogicaNegocio.ValueObjects.NombreCompleto", "NombreCompleto", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("int");

                            b1.Property<string>("Apellido")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NombreCompleto_apellido");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NombreCompleto_nombre");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("NombreCompleto")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.Navigation("Lineas");
                });
#pragma warning restore 612, 618
        }
    }
}

***********************************
Archivo: AltaArticulo.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Articulos\AltaArticulo.cs
***********************************
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesServicios;
using LogicaNegocio.InterfacesRepositorio;
using LogicaAccesoDatos.EF;
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.CarpetaDtos;


namespace LogicaAplicacion.Articulos
{
    public class AltaArticulo : IAlta<ArticuloDto>
    {
        IRepositorioArticulo _repositorioArticulo;

        public AltaArticulo(IRepositorioArticulo repositorioArticulo)
        {
            _repositorioArticulo = repositorioArticulo;
        }

        public void Ejecutar(ArticuloDto articuloDto)
        {
            Articulo art = ArticuloMapper.FromDto(articuloDto);
            _repositorioArticulo.Add(art); ;
        }
    }
}

***********************************
Archivo: EditarArticulo.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Articulos\EditarArticulo.cs
***********************************
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;


namespace LogicaAplicacion.Articulos
{
    public class EditarArticulo : IEditar<Articulo> //NO ES NECESARIO
    {
        IRepositorioArticulo _repositorioArticulo;

        public EditarArticulo(IRepositorioArticulo repositorioArticulo)
        {
            _repositorioArticulo = repositorioArticulo;
        }

        public void Ejecutar(int id, Articulo obj)
        {
            _repositorioArticulo.Update(id, obj);
        }
    }
}

***********************************
Archivo: EliminarArticulo.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Articulos\EliminarArticulo.cs
***********************************
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;


namespace LogicaAplicacion.Articulos
{
    public class EliminarArticulo : IEliminar<Articulo> // NO ES NECESARIO
    {
        IRepositorioArticulo _repositorioArticulo;

        public EliminarArticulo(IRepositorioArticulo repositorioArticulo)
        {
            _repositorioArticulo = repositorioArticulo;
        }

        public void Ejecutar(int id)
        {
            _repositorioArticulo.Delete(id);
        }

    }
}

***********************************
Archivo: ObtenerArticulo.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Articulos\ObtenerArticulo.cs
***********************************
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;

namespace LogicaAplicacion.Articulos
{
    public class ObtenerArticulo : IObtener<Articulo>
    {
        IRepositorioArticulo _repositorioArticulo;

        public ObtenerArticulo(IRepositorioArticulo repositorioArticulo)
        {
            _repositorioArticulo = repositorioArticulo;
        }

        public Articulo Ejecutar(int id)
        {
            return _repositorioArticulo.GetById(id);
        }
    }
}

***********************************
Archivo: ObtenerArticulos.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Articulos\ObtenerArticulos.cs
***********************************
using LogicaAccesoDatos.EF;
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;


namespace LogicaAplicacion.Articulos
{
    public class ObtenerArticulos : IObtenerTodos<ArticuloDto>
    {
        IRepositorioArticulo _repositorioArticulo;

        public ObtenerArticulos(IRepositorioArticulo repositorioArticulo)
        {
            _repositorioArticulo = repositorioArticulo;
        }

        public IEnumerable<ArticuloDto> Ejecutar()
        {
            IEnumerable<ArticuloDto> articulosDtos = ArticuloMapper.ToListaDto(_repositorioArticulo.GetAll());
            return articulosDtos;
        }

    }
}

***********************************
Archivo: ObtenerCliente.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Clientes\ObtenerCliente.cs
***********************************
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using LogicaAccesoDatos.EF;
using LogicaNegocio.Entidades;

namespace LogicaAplicacion.Clientes
{
    public class ObtenerCliente : IObtener<Cliente>
    {
        IRepositorioCliente _repositorioCliente;

        public ObtenerCliente(IRepositorioCliente repositorioCliente)
        {
            _repositorioCliente = repositorioCliente;
        }
        public Cliente Ejecutar(int id)
        {
            return _repositorioCliente.GetById(id);
        }

    }
}

***********************************
Archivo: ObtenerClientes.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Clientes\ObtenerClientes.cs
***********************************
using LogicaAccesoDatos.EF;
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;


namespace LogicaAplicacion.Clientes
{
    public class ObtenerClientes : IObtenerTodos<ClienteDto>
    {
        IRepositorioCliente _repositorioCliente;

        public ObtenerClientes(IRepositorioCliente repositorioCliente)
        {
            _repositorioCliente = repositorioCliente;
        }
        public IEnumerable<ClienteDto> Ejecutar()
        {
            IEnumerable<ClienteDto> clientesDto = ClienteMapper.ToListaDto(_repositorioCliente.GetAll());
            return clientesDto;
        }

    }
}


***********************************
Archivo: ObtenerPorInt.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Clientes\ObtenerPorInt.cs
***********************************
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;


namespace LogicaAplicacion.Clientes
{
    public class ObtenerPorInt : IObtenerPorInt<ClienteDto>
    {
        IRepositorioCliente _repositorioCliente;

        public ObtenerPorInt(IRepositorioCliente repositorioCliente)
        {
            _repositorioCliente = repositorioCliente;
        }

        public IEnumerable<ClienteDto> Ejecutar(int dato)
        {
            IEnumerable<ClienteDto> clientesDtoPorInt = ClienteMapper.ToListaDto(_repositorioCliente.GetByMonto(dato));

            return clientesDtoPorInt;
        }
    }
}

***********************************
Archivo: ObtenerPorString.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Clientes\ObtenerPorString.cs
***********************************
using LogicaAccesoDatos.EF;
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;


namespace LogicaAplicacion.Clientes
{
    public class ObtenerPorString : IObtenerPorString<ClienteDto>
    {
        IRepositorioCliente _repositorioCliente;

        public ObtenerPorString(IRepositorioCliente repositorioCliente)
        {
            _repositorioCliente = repositorioCliente;
        }

        public IEnumerable<ClienteDto> Ejecutar(string dato)
        {
            IEnumerable<ClienteDto> clientesDtoPorString = ClienteMapper.ToListaDto(_repositorioCliente.GetByString(dato));

            return clientesDtoPorString;
        }
    }
}

***********************************
Archivo: AltaPedidoComun.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Pedidos\AltaPedidoComun.cs
***********************************
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using LogicaNegocio.InterfacesServicios;

namespace LogicaAplicacion.Pedidos
{
    public class AltaPedidoComun : IAlta<PedidoComunDto>
    {
        IRepositorioPedido _repositorioPedido;

        public AltaPedidoComun(IRepositorioPedido repositorioPedido)
        {
            _repositorioPedido = repositorioPedido;
        }

        public void Ejecutar(PedidoComunDto pedidoComunDto)
        {
            PedidoComun pedidoComun = PedidoComunMapper.FromDto(pedidoComunDto);
            _repositorioPedido.Add(pedidoComun);
        }
    }
}

***********************************
Archivo: AltaPedidoExpress.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Pedidos\AltaPedidoExpress.cs
***********************************
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.Pedidos
{
    public class AltaPedidoExpress : IAlta<PedidoExpressDto>
    {
        IRepositorioPedido _repositorioPedido;

        public AltaPedidoExpress(IRepositorioPedido repositorioPedido)
        {
            _repositorioPedido = repositorioPedido;
        }

        public void Ejecutar(PedidoExpressDto pedidoExpressDto)
        {
            PedidoExpress pedidoExpress = PedidoExpressMapper.FromDto(pedidoExpressDto);
            _repositorioPedido.Add(pedidoExpress);
        }
    }
}

***********************************
Archivo: AnularPedido.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Pedidos\AnularPedido.cs
***********************************
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.Pedidos
{
    public class AnularPedido : IAnular<Pedido>
    {
        IRepositorioPedido _repositorioPedido;

        public AnularPedido(IRepositorioPedido repositorioPedido)
        {
            _repositorioPedido = repositorioPedido;
        }

        public void Ejecutar(int id)
        {
            _repositorioPedido.Anular(id);
        }
    }
}

***********************************
Archivo: ObtenerPedidosPorAnulado.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Pedidos\ObtenerPedidosPorAnulado.cs
***********************************
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.Pedidos
{
    public class ObtenerPedidosPorAnulado : IObtenerPorBool<PedidoDto>
    {
        IRepositorioPedido _repositorioPedido;

        public ObtenerPedidosPorAnulado(IRepositorioPedido repositorioPedido)
        {
            _repositorioPedido = repositorioPedido;
        }
        public IEnumerable<PedidoDto> Ejecutar(bool dato)
        {
            IEnumerable<PedidoDto> pedidosDto = PedidoMapper.ToListaDto(_repositorioPedido.GetByBool(dato));
            return pedidosDto;
        }

    }

}

***********************************
Archivo: ObtenerPedidosPorFecha.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Pedidos\ObtenerPedidosPorFecha.cs
***********************************
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAplicacion.Pedidos
{

    public class ObtenerPedidosPorFecha : IObtenerPorFecha<PedidoDto>
    {
        IRepositorioPedido _repositorioPedido;

        public ObtenerPedidosPorFecha(IRepositorioPedido repositorioPedido)
        {
            _repositorioPedido = repositorioPedido;
        }
        public IEnumerable<PedidoDto> Ejecutar(DateTime fecha)
        {
            IEnumerable<PedidoDto> pedidosDto = PedidoMapper.ToListaDto(_repositorioPedido.GetByDate(fecha));
            return pedidosDto;
        }

    }
    
}

***********************************
Archivo: AltaUsuario.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Usuarios\AltaUsuario.cs
***********************************
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesServicios;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.CarpetaDtos;

namespace LogicaAplicacion.Usuarios
{
    public class AltaUsuario : IAlta<AdminDto>
    {
        IRepositorioUsuario _repositorioUsuario;

        public AltaUsuario(IRepositorioUsuario repositorioUsuario)
        {
            _repositorioUsuario = repositorioUsuario;
        }

        public void Ejecutar (AdminDto adminDto)
        {
            Administrador admin = AdminMapper.FromDto(adminDto);
            _repositorioUsuario.Add(admin);
        }
    }
}

***********************************
Archivo: EditarUsuario.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Usuarios\EditarUsuario.cs
***********************************
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;

namespace LogicaAplicacion.Usuarios
{
    public class EditarUsuario : IEditar<UsuarioDto>
    {
        IRepositorioUsuario _repositorioUsuario;

        public EditarUsuario(IRepositorioUsuario repositorioUsuario)
        {
            _repositorioUsuario = repositorioUsuario;
        }

        public void Ejecutar(int id, UsuarioDto obj)
        {
            Usuario usuario = UsuarioMapper.FromDto(obj);

            _repositorioUsuario.Update(id, usuario);
        }
    }
}

***********************************
Archivo: EliminarUsuario.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Usuarios\EliminarUsuario.cs
***********************************
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;

namespace LogicaAplicacion.Usuarios
{
    public class EliminarUsuario : IEliminar<Usuario>
    {
        IRepositorioUsuario _repositorioUsuario;

        public EliminarUsuario(IRepositorioUsuario repositorioUsuario)
        {
            _repositorioUsuario = repositorioUsuario;
        }

        public void Ejecutar(int id)
        {
            _repositorioUsuario.Delete(id);
        }
    }
}

***********************************
Archivo: ObtenerPorDosString.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Usuarios\ObtenerPorDosString.cs
***********************************
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using LogicaNegocio.InterfacesServicios;

namespace LogicaAplicacion.Usuarios
{
    public class ObtenerPorDosString : IObtenerPorDosString<Usuario>
    {
        IRepositorioUsuario _repositorioUsuario;

        public ObtenerPorDosString(IRepositorioUsuario repositorioUsuario)
        {
            _repositorioUsuario = repositorioUsuario;
        }

        public Usuario Ejecutar(string dato1, string dato2)
        {
            Usuario usuario = _repositorioUsuario.Login(dato1, dato2);
            return usuario;
        }
    }
}

***********************************
Archivo: ObtenerUsuario.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Usuarios\ObtenerUsuario.cs
***********************************
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;

namespace LogicaAplicacion.Usuarios
{
    public class ObtenerUsuario : IObtener<UsuarioDto>
    {
        IRepositorioUsuario _repositorioUsuario;

        public ObtenerUsuario(IRepositorioUsuario repositotioUsuario) 
        {
            _repositorioUsuario = repositotioUsuario;
        }

        public UsuarioDto Ejecutar(int id)
        {
            UsuarioDto usuarioDto = UsuarioMapper.ToDto(_repositorioUsuario.GetById(id));
            return usuarioDto;
        }
    }
}

***********************************
Archivo: ObtenerUsuarios.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAplicacion\Usuarios\ObtenerUsuarios.cs
***********************************
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.CarpetaDtos.MapeosDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesRepositorio;
using LogicaNegocio.InterfacesServicios;

namespace LogicaAplicacion.Usuarios
{
    public class ObtenerUsuarios : IObtenerTodos<UsuarioDto>
    {
        IRepositorioUsuario _repositorioUsuario;
        public ObtenerUsuarios(IRepositorioUsuario repositorioUsuario)
        {
            _repositorioUsuario = repositorioUsuario;
        }

        public IEnumerable<UsuarioDto> Ejecutar()
        {
            IEnumerable<UsuarioDto> usuariosDto = UsuarioMapper.ToListaDto(_repositorioUsuario.GetAll());
            return usuariosDto;
        }
    }
}

***********************************
Archivo: AdminDto.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\AdminDto.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.CarpetaDtos
{
    public record AdminDto(int Id, string Nombre, string Apellido, string Mail, string Contrasenia, string Discriminator)
    {

    }
}

***********************************
Archivo: ArticuloDto.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\ArticuloDto.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.CarpetaDtos
{
    public record ArticuloDto(int Id, string Nombre, string Descripcion, string Codigo, double Precio, int Stock)
    {
    }
}

***********************************
Archivo: ClienteDto.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\ClienteDto.cs
***********************************
using LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.CarpetaDtos
{
    public record ClienteDto(int Id, string Rut, string RazonSoc, string Calle, string Num, string Ciudad, int DistanciaPapeleria);
}

***********************************
Archivo: LineaDto.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\LineaDto.cs
***********************************
using LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.CarpetaDtos
{
    public record LineaDto
    {
        public LineaDto(int id, int articuloId, string nombre, string descripcion, string codigo, int cantUnidades, double precioUnitarioVigente)
        {
            Id = id;
            ArticuloId = articuloId;
            Nombre = nombre;
            Descripcion = descripcion;
            Codigo = codigo;
            CantUnidades = cantUnidades;
            PrecioUnitarioVigente = precioUnitarioVigente;
        }

        public LineaDto() { }

        public int Id { get; set; }
        public int ArticuloId { get; set; }
        public string Nombre { get; set; }
        public string Descripcion { get; set; }
        public string Codigo { get; set; }

        public int CantUnidades { get; set; }
        public double PrecioUnitarioVigente { get; set; }

    }

}

***********************************
Archivo: PedidoComunDto.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\PedidoComunDto.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.CarpetaDtos
{
    public record PedidoComunDto
    {
        public PedidoComunDto(int id, DateTime fechaRealizado, int clienteId, DateTime fechaEntrega, double montoSubtotal, int cantidad, string discriminator)
        {
            Id = id;
            FechaRealizado = fechaRealizado;
            ClienteId = clienteId;
            FechaEntrega = fechaEntrega;
            MontoSubtotal = montoSubtotal;
            Cantidad = cantidad;
            Discriminator = discriminator;
        }

        public PedidoComunDto() { }

        public int Id { get; set; }
        public DateTime FechaRealizado { get; set; }
        public int ClienteId { get; set; }
        public DateTime FechaEntrega { get; set; }
        public double MontoSubtotal { get; set; }
        public int Cantidad { get; set; }
        public string Discriminator { get; set; }
        public List<LineaDto> Lineas { get; set; } = new List<LineaDto>();
    }
}

***********************************
Archivo: PedidoDto.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\PedidoDto.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.CarpetaDtos
{
    public class PedidoDto
    {
        public PedidoDto(int id, DateTime fechaEntrega, string nombreCliente, double montoTotal, string discriminator)
        {
            Id = id;
            FechaEntrega = fechaEntrega;
            ClienteNombre = nombreCliente;
            MontoTotal = montoTotal;
            Discriminator = discriminator;
        }

        public PedidoDto() { }

        public int Id { get; set; }
        public DateTime FechaEntrega { get; set; }
        public string ClienteNombre { get; set; }
        public double MontoTotal { get; set; }
        public string Discriminator { get; set; }

    }
}

***********************************
Archivo: PedidoExpressDto.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\PedidoExpressDto.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.CarpetaDtos
{
    public record PedidoExpressDto
    {
        public PedidoExpressDto(int id, DateTime fechaRealizado, int clienteId, DateTime fechaEntrega, double montoSubtotal, int cantidad, string discriminator)
        {
            Id = id;
            FechaRealizado = fechaRealizado;
            ClienteId = clienteId;
            FechaEntrega = fechaEntrega;
            MontoSubtotal = montoSubtotal;
            Cantidad = cantidad;
            Discriminator = discriminator;
        }

        public PedidoExpressDto() { }

        public int Id { get; set; }
        public DateTime FechaRealizado { get; set; }
        public int ClienteId { get; set; }
        public DateTime FechaEntrega { get; set; }
        public double MontoSubtotal { get; set; }
        public int Cantidad { get; set; }
        public string Discriminator { get; set; }
        public List<LineaDto> Lineas { get; set; } = new List<LineaDto>();
    }
}

***********************************
Archivo: UsuarioDto.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\UsuarioDto.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.CarpetaDtos
{
    public record UsuarioDto(int Id, string Nombre, string Apellido, string Mail, string Contrasenia, string ContraseniaEncriptada, string Discriminator)
    { 
        
    }



}




***********************************
Archivo: Administrador.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Entidades\Administrador.cs
***********************************
using LogicaNegocio.Excepciones.Articulo;
using LogicaNegocio.InterfacesDominio;

namespace LogicaNegocio.Entidades
{
    public class Administrador : Usuario
    {

    }
}

***********************************
Archivo: Articulo.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Entidades\Articulo.cs
***********************************
using LogicaNegocio.Excepciones.Articulo;
using LogicaNegocio.InterfacesDominio;

namespace LogicaNegocio.Entidades
{
    public class Articulo: IEntity, IValidable
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Descripcion { get; set; }
        public string Codigo { get; set; }
        public double Precio { get; set; }
        public int Stock { get; set; }

        public void Validar()
        {
            ValidarNombre();
            ValidarCodigo();
            ValidarDescripcion();
            ValidarPrecio();
            ValidarStock();
        }

        private void ValidarNombre() 
        {
            if (string.IsNullOrEmpty(Nombre) || Nombre.Length > ParametrosGenerales.MaxLargoArticulo || Nombre.Length < ParametrosGenerales.MinLargoArticulo) // TODO VALIDAR QUE NO SE REPITA
            {
                throw new NombreArticuloInvalidaException();
            }
        }

        private void ValidarDescripcion() 
        { 
            if(string.IsNullOrEmpty(Descripcion) || Descripcion.Length < 5) 
            { 
                throw new DescripcionArticuloInvalidaException();
            }
        }
        private void ValidarCodigo()
        {
            if (string.IsNullOrEmpty(Codigo) || Codigo.Length != 13)
            {
                throw new CodigoArticuloInvalidaException();
            }
        }
        private void ValidarPrecio()
        {
            if(Precio<=0)
            {
                throw new PrecioArticuloInvalidaException();
            }
        }
        private void ValidarStock() 
        {
            if (Stock <= 0)
            {
                throw new StockArticuloInvalidaException();
            }
        }

        public void Update(Articulo obj)
        {
            obj.Validar();
            Nombre = obj.Nombre;
            Descripcion = obj.Descripcion;
            Codigo = obj.Codigo;
            Precio = obj.Precio;
            Stock = obj.Stock;
        }
    }
}

***********************************
Archivo: Cliente.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Entidades\Cliente.cs
***********************************
using LogicaNegocio.Excepciones.Cliente;
using LogicaNegocio.Excepciones.Usuario;
using LogicaNegocio.InterfacesDominio;
using LogicaNegocio.ValueObjects;


namespace LogicaNegocio.Entidades
{
    public class Cliente : IEntity, IValidable
    {
        public int Id { get; set; }
        public string RazonSoc { get; set; }
        public string Rut { get; set; }
        public Direccion Direccion { get; set; }
        public List<Pedido> Pedidos { get; set; } = new List<Pedido>();

        public void Validar()
        {
            ValidarRazonSoc();
            ValidarRut();
            ValidarDireccion();
        }

        private void ValidarRazonSoc()
        {
            if (string.IsNullOrEmpty(RazonSoc))
            {
                throw new RazonSocClienteInvalidaException();
            }
        }

        private void ValidarRut()
        {
            if (string.IsNullOrEmpty(Rut))
            {
                throw new RutClienteInvalidaException();
            }
        }

        private void ValidarDireccion()
        {
            if (Direccion == null)
            {
                throw new DireccionClienteInvalidaException();
            }

        }
    }
}

***********************************
Archivo: Linea.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Entidades\Linea.cs
***********************************
using LogicaNegocio.Excepciones.Articulo;
using LogicaNegocio.Excepciones.Linea;
using LogicaNegocio.InterfacesDominio;

namespace LogicaNegocio.Entidades
{
    public class Linea : IEntity, IValidable
    {
        public int Id { get; set; }
        public Articulo Articulo { get; set; }
        public int ArticuloId { get; set; }
        public int CantUnidades { get; set; }
        public double PrecioUnitarioVigente { get; set; }

        public void Validar()
        {
            ValidarArticulo();
            ValidarCantidad();
            ValidarPrecio();
        }

        private void ValidarArticulo() 
        { 
            if(Articulo == null)
            {
                throw new ArticuloLineaInvalidaException();
            }
        }

        private void ValidarCantidad()
        {
            if(CantUnidades <= 0 || CantUnidades > Articulo.Stock)
            {
                throw new CantLineaInvalidaException();
            }
        }

        private void ValidarPrecio()
        {
            if(PrecioUnitarioVigente < 0)
            {
                throw new PrecioLineaInvalidaException();
            }
        }
    }
}

***********************************
Archivo: ParametrosGenerales.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Entidades\ParametrosGenerales.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Entidades
{
    public static class ParametrosGenerales
    {
        public static int Iva { get; set; }
        public static int MaxLargoArticulo { get; set; }
        public static int MinLargoArticulo { get; set; }
        public static int Plazo { get; set; }
        public static int RecargoComunDistancia { get; set; }
        public static int RecargoExpress { get; set; }
        public static int RecargoExpressDia{ get; set; }

    }
}

***********************************
Archivo: Pedido.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Entidades\Pedido.cs
***********************************
using LogicaNegocio.Excepciones.Articulo;
using LogicaNegocio.Excepciones.Pedido;
using LogicaNegocio.InterfacesDominio;
using LogicaNegocio.ValueObjects;

namespace LogicaNegocio.Entidades
{
    public abstract class Pedido : IEntity, IValidable
    {
        public int Id { get; set; }
        public DateTime FechaRealizado { get; set; }
        public Cliente Cliente { get; set; }
        public int ClienteId { get; set; }
        public List<Linea> Lineas { get; set; }
        public DateTime FechaEntrega { get; set; }
        public double MontoSubtotal { get; set; }
        public double MontoTotal { get; set; }
        public int Cantidad { get; set; }
        public bool Anulado { get; set; } = false;
        public string Discriminator { get; set; }


        public void Validar()
        {
            ValidarFechaRealizado();
            ValidarFechaEntrega();
            ValidarLinea();
            ValidarCliente();
        }

        private void ValidarFechaRealizado() 
        {
            FechaRealizado = DateTime.Now;
        }

        public virtual void ValidarFechaEntrega()
        {
            
            if (FechaEntrega.Date < FechaRealizado.Date) 
            {
                throw new FechaRecibidoPedidoInvalidaException();
            }
        }

        private void ValidarLinea() 
        {
            if (Lineas.Count == 0) 
            {
                throw new LineaPedidoInvalidaException();
            }
        }

        private void ValidarCliente() 
        {
            Cliente cliente = new Cliente();
            if (ClienteId <= 0) 
            {
                throw new ClientePedidoInvalidaException();
            }
        }

        //public void CaluclarSubtotal()
        //{
        //    double subtotal = 0;

        //    foreach(Linea linea in Lineas)
        //    {
        //        subtotal += linea.CalcularPrecio();
        //    }

        //    MontoSubtotal = subtotal;
        //}

        public abstract void CalcularRecargo();

        public void Anular()
        {
            Anulado = true;
        }
    }
}

***********************************
Archivo: PedidoComun.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Entidades\PedidoComun.cs
***********************************
using LogicaNegocio.Excepciones.Articulo;
using LogicaNegocio.Excepciones.Pedido;
using LogicaNegocio.InterfacesDominio;

namespace LogicaNegocio.Entidades
{
    public class PedidoComun : Pedido
    {
        public override void ValidarFechaEntrega()
        {
            base.ValidarFechaEntrega();

            if(FechaEntrega < FechaRealizado.AddDays(7))
            {
                throw new PlazoComunPedidoInvalidaException();
            }
        }
        public override void CalcularRecargo()
        {
            if(Cliente.Direccion.DistanciaPapeleria > 100)
            {
                MontoTotal = MontoSubtotal + (MontoSubtotal * ((double)ParametrosGenerales.RecargoComunDistancia / 100));
            }else
            {
                MontoTotal = MontoSubtotal;            
            }

            MontoTotal += MontoTotal * ((double)ParametrosGenerales.Iva / 100);
        }
    }
}

***********************************
Archivo: PedidoExpress.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Entidades\PedidoExpress.cs
***********************************
using LogicaNegocio.Excepciones.Articulo;
using LogicaNegocio.Excepciones.Pedido;
using LogicaNegocio.InterfacesDominio;

namespace LogicaNegocio.Entidades
{
    public class PedidoExpress : Pedido
    {
        public override void ValidarFechaEntrega()
        {
            base.ValidarFechaEntrega();

            if (FechaEntrega > FechaRealizado.AddDays(ParametrosGenerales.Plazo))
            {
                throw new PlazoExpressPedidoInvalidaException();
            }
        }
        public override void CalcularRecargo()
        {
            if(FechaRealizado.Date == FechaEntrega.Date)
            {
                MontoTotal = MontoSubtotal + (MontoSubtotal * ((double)ParametrosGenerales.RecargoExpressDia / 100));
            }
            else
            {
                MontoTotal = MontoSubtotal + (MontoSubtotal * ((double)ParametrosGenerales.RecargoExpress / 100));
            }

            MontoTotal += MontoTotal * ((double)ParametrosGenerales.Iva / 100);
        }
    }
}

***********************************
Archivo: Usuario.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Entidades\Usuario.cs
***********************************
using LogicaNegocio.Excepciones.Usuario;
using LogicaNegocio.InterfacesDominio;
using LogicaNegocio.ValueObjects;
using System.Net.Mail;
using System.Text;
using System.Text.RegularExpressions;

namespace LogicaNegocio.Entidades
{
    public class Usuario : IEntity, IValidable
    {
        public int Id { get; set; }
        public string Mail { get; set; }
        public NombreCompleto NombreCompleto { get; set; }
        public string Contrasenia { get; set; }
        public string ContraseniaEncripada { get; set; }
        public string Discriminator { get; set; }

        public void Validar()
        {
            ValidarMail();
            ValidarContrasenia();
            ContraseniaEncripada = EncodeStringToBase64(Contrasenia);
        }

        private void ValidarMail()
        {
            var valEmail = new Regex(@"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$");//PROMPT CHATGPT: Create a regex to validate an email.

            if (string.IsNullOrEmpty(Mail) || !valEmail.IsMatch(Mail))
            {
                throw new MailUsuarioInvalidaException();
            }
            
        }


        private void ValidarContrasenia()
        {
            var valContrasenia = new Regex(@"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[,.!;]).{6,}$"); //PROMPT CHATGPT:Create a regular expression to validate a string: it should have a length of at least 6 characters, at least 1 capital letter, at least 1 lowercase letter, at least 1 integer, at least 1 of the following punctuation marks: a comma, a period, a semicolon or an exclamation mark

            if (string.IsNullOrEmpty(Contrasenia) || !valContrasenia.IsMatch(Contrasenia))
            {
                throw new ContraseniaUsuarioInvalidaException();
            }
        }
        public void Update(Usuario obj)
        {
            obj.Validar();
            NombreCompleto = obj.NombreCompleto;
            Contrasenia = obj.Contrasenia;
            ContraseniaEncripada = EncodeStringToBase64(Contrasenia);
        }

        public string EncodeStringToBase64(string stringToEncode)
        {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(stringToEncode));
        }

        public string DecodeStringFromBase64(string stringToDecode)
        {
            return Encoding.UTF8.GetString(Convert.FromBase64String(stringToDecode));
        }
    }
}

***********************************
Archivo: DomainException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\DomainException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones
{
    public class DomainException : Exception
    {
        public DomainException() { }

        public DomainException(string message) : base(message) { }

    }
}

***********************************
Archivo: IEntity.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesDominio\IEntity.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesDominio
{
    internal interface IEntity
    {
        int Id { get; set; }
    }
}

***********************************
Archivo: IValidable.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesDominio\IValidable.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesDominio
{
    public interface IValidable
    {
        void Validar();

    }
}

***********************************
Archivo: IRepositorio.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesRepositorio\IRepositorio.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesRepositorio
{
    public interface IRepositorio<T>
    {
        public void Add(T obj);
        public void Delete(int id);
        public void Update(int id, T obj);
        public T GetById(int id);
        public IEnumerable<T> GetAll();

    }
}

***********************************
Archivo: IRepositorioArticulo.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesRepositorio\IRepositorioArticulo.cs
***********************************
using LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesRepositorio
{
    public interface IRepositorioArticulo : IRepositorio<Articulo>
    {
        public Articulo GetByName(string name);

    }
}

***********************************
Archivo: IRepositorioCliente.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesRepositorio\IRepositorioCliente.cs
***********************************
using LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesRepositorio
{
    public interface IRepositorioCliente : IRepositorio<Cliente>
    {
        public IEnumerable<Cliente> GetByString(string dato);

        public IEnumerable<Cliente> GetByMonto(int monto);

    }
}

***********************************
Archivo: IRepositorioPedido.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesRepositorio\IRepositorioPedido.cs
***********************************
using LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesRepositorio
{
    public interface IRepositorioPedido : IRepositorio<Pedido>
    {
        public IEnumerable<Pedido> GetByDate(DateTime dato);

        public void Anular(int id);

        public IEnumerable<Pedido> GetByBool(bool dato);
    }
}

***********************************
Archivo: IRepositorioUsuario.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesRepositorio\IRepositorioUsuario.cs
***********************************
using LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesRepositorio
{
    public interface IRepositorioUsuario : IRepositorio<Usuario>
    {
        public Usuario Login(string email, string password);

    }
}

***********************************
Archivo: IAlta.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesServicios\IAlta.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesServicios
{
    public interface IAlta<T>
    {
        public void Ejecutar(T obj);
    }
}

***********************************
Archivo: IAnular.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesServicios\IAnular.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesServicios
{
    public interface IAnular<T>
    {
        public void Ejecutar(int id);
    }
}

***********************************
Archivo: IEditar.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesServicios\IEditar.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesServicios
{
    public interface IEditar<T>
    {
        public void Ejecutar(int id, T obj);
    }
}

***********************************
Archivo: IEliminar.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesServicios\IEliminar.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesServicios
{
    public interface IEliminar<T>
    {
        public void Ejecutar(int id);
    }
}

***********************************
Archivo: IObtener.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesServicios\IObtener.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesServicios
{
    public interface IObtener<T>
    {
        public T Ejecutar(int id);
    }
}

***********************************
Archivo: IObtenerPorBool.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesServicios\IObtenerPorBool.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesServicios
{
    public interface IObtenerPorBool<T>
    {
            public IEnumerable<T> Ejecutar(bool dato);
        
    }
}

***********************************
Archivo: IObtenerPorDosString.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesServicios\IObtenerPorDosString.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesServicios
{
    public interface IObtenerPorDosString <T>
    {
        public T Ejecutar(string dato1, string dato2);
    }
}

***********************************
Archivo: IObtenerPorFecha.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesServicios\IObtenerPorFecha.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesServicios
{
    public interface IObtenerPorFecha<T>
    {
        public IEnumerable<T> Ejecutar(DateTime fecha);
    }
}

***********************************
Archivo: IObtenerPorInt.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesServicios\IObtenerPorInt.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesServicios
{
    public interface IObtenerPorInt<T>
    {
        public IEnumerable<T> Ejecutar(int dato);
    }
}

***********************************
Archivo: IObtenerPorString.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesServicios\IObtenerPorString.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesServicios
{
    public interface IObtenerPorString<T>
    {
        public IEnumerable<T> Ejecutar(string dato);
    }
}

***********************************
Archivo: IObtenerTodos.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\InterfacesServicios\IObtenerTodos.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.InterfacesServicios
{
    public interface IObtenerTodos<T>
    {
        public IEnumerable<T> Ejecutar();
    }
}

***********************************
Archivo: Direccion.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\ValueObjects\Direccion.cs
***********************************


using LogicaNegocio.Excepciones.ValueObjects.Direccion;

namespace LogicaNegocio.ValueObjects
{
    public record Direccion
    {
        public string Calle { get; }
        public string Num { get; }
        public string Ciudad { get; }
        public int DistanciaPapeleria { get; }

        public Direccion()
        {

        }
        public Direccion(string calle, string num, string ciudad, int distancia)
        {
            Calle = calle;
            Num = num;
            Ciudad = ciudad;
            DistanciaPapeleria = distancia;
            Validar();
        }

        private void Validar()
        {
            ValidarCalle();
            ValidarNum();
            ValidarCiudad();
            ValidarDistanciaPaleleria();
        }

        private void ValidarCalle()
        {
            if (string.IsNullOrEmpty(Calle))
            {
                throw new CalleDireccionInvalidaException();
            }
        }

        private void ValidarNum()
        {
            if (string.IsNullOrEmpty(Num))
            {
                throw new NumDireccionInvalidaException();
            }
        }

        private void ValidarCiudad()
        {
            if(string.IsNullOrEmpty(Ciudad))
            {
                throw new CiudadDireccionInvalidaException();
            }
        }

        private void ValidarDistanciaPaleleria()
        {
            if(DistanciaPapeleria < 0)
            {
                throw new DistanciaDireccionInvalidaException();
            }
        }

    }
}

***********************************
Archivo: NombreCompleto.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\ValueObjects\NombreCompleto.cs
***********************************
using LogicaNegocio.Excepciones.ValueObjects.NombreCompleto;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace LogicaNegocio.ValueObjects
{
    public record NombreCompleto
    {
        public string Nombre { get; }
        public string Apellido { get; }

        public NombreCompleto(string nombre, string apellido)
        {
            Nombre = nombre;
            Apellido = apellido;
            Validar();
        }
        public void Validar()
        {
            ValidarNombre();
            ValidarApellido();
        }

        private void ValidarNombre()
        {
            var valNombre = new Regex(@"^(?!.*(?: |\-|'))[a-zA-Z][a-zA-Z '-]*[a-zA-Z]$"); //PROMPT GPT: Create a regular expression to validate a string: it can only have letters, lowercase or capital case, and it can include a space, a hyphen or an apostrophe but the space, hyphen or apostrophe cannot be at start or end of the string.
            if (string.IsNullOrEmpty(Nombre) || !valNombre.IsMatch(Nombre))
            { 
                throw new NombreNombreCompletoInvalidaException();
            }
        }

        private void ValidarApellido()
        {
            var valNombre = new Regex(@"^(?!.*(?: |\-|'))[a-zA-Z][a-zA-Z '-]*[a-zA-Z]$");//PROMPT GPT: Create a regular expression to validate a string: it can only have letters, lowercase or capital case, and it can include a space or a hyphen but the space or hyphen cannot be at start or end of the string.
            if (string.IsNullOrEmpty(Apellido) || !valNombre.IsMatch(Apellido))
            {
                throw new ApellidoNombreCompletoInvalidaException();
            }

        }
    }
}

***********************************
Archivo: ArticulosController.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\WebApi\Controllers\ArticulosController.cs
***********************************
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesServicios;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ArticulosController : ControllerBase
    {
       
        IObtenerTodos<ArticuloDto> _obtenerArticulos;

        public ArticulosController(
       
            IObtenerTodos<ArticuloDto> obtenerArticulos
            )
        {
            _obtenerArticulos = obtenerArticulos;
        }

        // GET: ArticuloController

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [HttpGet]
        public IActionResult GetAll()
        {
            try
            {
                return Ok(_obtenerArticulos.Ejecutar());
            }
            //catch (NotFoundException e)
            //{
            //    return StatusCode(StatusCodes.Status204NoContent);
            //}
            catch (Exception e)
            {
                return StatusCode(500, "Hupp" + e.Message);
            }

        }

    }
}

***********************************
Archivo: PedidosController.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\WebApi\Controllers\PedidosController.cs
***********************************
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesServicios;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;


namespace WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class PedidosController : ControllerBase
    {
        IObtenerPorBool<PedidoDto>  _obtenerPedidosPorAnulado;

        public PedidosController(

            IObtenerPorBool<PedidoDto> obtenerPedidosPorAnulado
            )
        {
            _obtenerPedidosPorAnulado = obtenerPedidosPorAnulado;
        }

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [HttpGet]
        public IActionResult GetByBool()
        {
            try
            {
                IEnumerable<PedidoDto> listaPedidos = _obtenerPedidosPorAnulado.Ejecutar(true);
                return Ok(listaPedidos);
            }
            //catch (NotFoundException e)
            //{
            //    return StatusCode(StatusCodes.Status204NoContent);
            //}
            catch (Exception e)
            {
                return StatusCode(500, "Hupp" + e.Message);
            }

        }

    }
}

***********************************
Archivo: ArticuloController.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\WebApp\Controllers\ArticuloController.cs
***********************************
using LogicaAccesoDatos.Excepciones;
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.Excepciones.Articulo;
using LogicaNegocio.InterfacesServicios;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using WebApp.Filter;

namespace WebApp.Controllers
{
    public class ArticuloController : Controller
    {

        IAlta<ArticuloDto> _altaArticulo;
        //IEditar<Articulo> _editarArticulo;
        //IEliminar<Articulo> _eliminarArticulo;
        //IObtener<Articulo> _obtenerArticulo;
        IObtenerTodos<ArticuloDto> _obtenerArticulos;

        public ArticuloController(
            IAlta<ArticuloDto> altaArticulo,
            //IEditar<Articulo> editarArticulo,
            //IEliminar<Articulo> eliminarArticulo,
            //IObtener<Articulo> obtenerArticulo,
            IObtenerTodos<ArticuloDto> obtenerArticulos
            )
        {
            _altaArticulo = altaArticulo;
            //_editarArticulo = editarArticulo;
            //_eliminarArticulo = eliminarArticulo;
            //_obtenerArticulo = obtenerArticulo;
            _obtenerArticulos = obtenerArticulos;
        }

        // GET: ArticuloController
        [AdminAutorizado]
        public IActionResult Index(string mensaje)
        {
            ViewBag.mensaje = mensaje;
            return View(_obtenerArticulos.Ejecutar());
        }

        // GET: ArticuloController/Details/5
        //public ActionResult Details(int id)
        //{
        //    return View();
        //}

        [AdminAutorizado]
        // GET: ArticuloController/Create
        public IActionResult Create()
        {
            return View();
        }

        [AdminAutorizado]
        // POST: ArticuloController/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(ArticuloDto articuloDto)
        {
            try
            {
                _altaArticulo.Ejecutar(articuloDto);
                return RedirectToAction("Index", new { mensaje = "Alta de artículo exitosa." });
            }
            catch (NombreArticuloInvalidaException e)
            {
                ViewBag.Mensaje = e.Message;
            }
            catch (DescripcionArticuloInvalidaException e)
            {
                ViewBag.Mensaje = e.Message;
            }
            catch (CodigoArticuloInvalidaException e) 
            {
                ViewBag.Mensaje = e.Message;
            }
            catch (PrecioArticuloInvalidaException e)
            {
                ViewBag.Mensaje = e.Message;
            }
            catch (StockArticuloInvalidaException e)
            {
                ViewBag.Mensaje = e.Message;
            }
            catch (ArgumentNullRepositorioException e)
            {
                ViewBag.Mensaje = e.Message;
            }
            catch (Exception e)
            {
                ViewBag.Mensaje = "Hubo un error al crear el artículo. Por favor, intente nuevamente.";
            }

            return View(articuloDto);
        }

        // GET: ArticuloController/Edit/5
        //public ActionResult Edit(int id)
        //{
        //    return View();
        //}

        // POST: ArticuloController/Edit/5
        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public ActionResult Edit(int id, IFormCollection collection)
        //{
        //    try
        //    {
        //        return RedirectToAction(nameof(Index));
        //    }
        //    catch
        //    {
        //        return View();
        //    }
        //}

        // GET: ArticuloController/Delete/5
        //public ActionResult Delete(int id)
        //{
        //    return View();
        //}

        // POST: ArticuloController/Delete/5
        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public ActionResult Delete(int id, IFormCollection collection)
        //{
        //    try
        //    {
        //        return RedirectToAction(nameof(Index));
        //    }
        //    catch
        //    {
        //        return View();
        //    }
        //}
    }
}

***********************************
Archivo: ClienteController.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\WebApp\Controllers\ClienteController.cs
***********************************
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.InterfacesServicios;
using Microsoft.AspNetCore.Mvc;
using WebApp.Filter;

namespace WebApp.Controllers
{
    public class ClienteController(IObtenerTodos<ClienteDto> obtenerTodos, IObtenerPorString<ClienteDto> obtenerPorString, IObtenerPorInt<ClienteDto> obtenerPorInt) : Controller
    {
        IObtenerTodos<ClienteDto> _obtenerClientes = obtenerTodos;
        IObtenerPorString<ClienteDto> _obtenerPorString = obtenerPorString;
        IObtenerPorInt<ClienteDto> _obtenerPorInt = obtenerPorInt;

        [AdminAutorizado]
        public IActionResult Index(string mensaje)
        {
            ViewBag.mensaje = mensaje;
            return View(_obtenerClientes.Ejecutar());
        }

        [AdminAutorizado]
        public IActionResult ObtenerPorRS(string rs)
        {
            return View("Index", _obtenerPorString.Ejecutar(rs));
        }

        [AdminAutorizado]
        public IActionResult ObtenerPorMonto(int monto)
        {
            return View("Index", _obtenerPorInt.Ejecutar(monto));
        }
    }
}

***********************************
Archivo: HomeController.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\WebApp\Controllers\HomeController.cs
***********************************
using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;
using WebApp.Models;

namespace WebApp.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}

***********************************
Archivo: PedidoController.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\WebApp\Controllers\PedidoController.cs
***********************************
using LogicaAplicacion.Articulos;
using LogicaAplicacion.Usuarios;
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.Excepciones.Linea;
using LogicaNegocio.Excepciones.Pedido;
using LogicaNegocio.InterfacesServicios;
using Microsoft.AspNetCore.Mvc;
using System.Text.Json;
using WebApp.Filter;

namespace WebApp.Controllers
{
    [AdminAutorizado]
    public class PedidoController : Controller
    {
        IObtener<Articulo> _obtenerArticulo;
        IObtener<Cliente> _obtenerCliente;
        IObtenerTodos<ArticuloDto> _obtenerArticulos;
        IObtenerTodos<ClienteDto> _obtenerClientes;
        IAlta<PedidoExpressDto> _altaPedidoExpress;
        IAlta<PedidoComunDto> _altaPedidoComun;
        IObtenerPorFecha<PedidoDto> _obtenerPedidos;
        IAnular<Pedido> _anularPedido;


        public PedidoController(
            IObtener<Articulo> obtenerArticulo,
            IObtener<Cliente> obtenerCliente,
            IObtenerTodos<ArticuloDto> obtenerArticulos,
            IObtenerTodos<ClienteDto> obtenerClientes,
            IAlta<PedidoExpressDto> altaPedidoExpress,
            IAlta<PedidoComunDto> altaPedidoComun,
            IObtenerPorFecha<PedidoDto> obtenerPedidos,
            IAnular<Pedido> anularPedido)
            
        {
            _obtenerArticulo = obtenerArticulo;
            _obtenerCliente = obtenerCliente;
            _obtenerArticulos = obtenerArticulos;
            _obtenerClientes = obtenerClientes;
            _altaPedidoExpress = altaPedidoExpress;
            _altaPedidoComun = altaPedidoComun;
            _obtenerPedidos = obtenerPedidos;
            _anularPedido = anularPedido;
        }


        public IActionResult CatalogoExpress()
        {
            BorrarViewBagPedido();
            return View(_obtenerArticulos.Ejecutar());
        }

        public IActionResult CatalogoComun()
        {
            BorrarViewBagPedido();
            return View(_obtenerArticulos.Ejecutar());
        }

        [HttpPost]
        public IActionResult AgregarLineaEx(int idArticulo, int cantidad)
        {
            try
            {
                Articulo articulo = _obtenerArticulo.Ejecutar(idArticulo);

                if (articulo == null)
                {
                    throw new ArticuloPedidoInvalidoException();
                }
                if (cantidad == 0)
                {
                    throw new CantLineaInvalidaException();
                }
                if (cantidad > articulo.Stock)
                {
                    throw new CantLineaInvalidaException();
                }

                PedidoExpressDto pedidoDto = GetPedidoExFromSession();
                if (pedidoDto == null)
                {
                    throw new PedidoNuloException();
                }

                var linea = new LineaDto()
                {
                    ArticuloId = articulo.Id,
                    Nombre = articulo.Nombre,
                    Descripcion = articulo.Descripcion,
                    Codigo = articulo.Codigo,
                    CantUnidades = cantidad,
                    PrecioUnitarioVigente = articulo.Precio
                };

                pedidoDto.Lineas.Add(linea);
                pedidoDto.Cantidad += cantidad;
                pedidoDto.MontoSubtotal += articulo.Precio * cantidad;

                SetViewBagEx(pedidoDto);
                SetPedidoExToSession(pedidoDto);
                ViewBag.Error = false;
                ViewBag.Mensaje = "Se dio de alta con exito";
            }
            catch (Exception e)
            {
                ViewBag.Error = true;
                ViewBag.Mensaje = e.Message;
            }
            return View("CatalogoExpress", _obtenerArticulos.Ejecutar());
        }

        public IActionResult CheckoutEx(int IdCliente, DateTime fechaEntrega)
        {
            Cliente cliente = _obtenerCliente.Ejecutar(IdCliente);

            try
            {
                if (cliente == null)
                {
                    throw new ClientePedidoInvalidaException();
                }
                PedidoExpressDto pedidoExpressDto = GetPedidoExFromSession();

                if (pedidoExpressDto == null)
                {
                    throw new PedidoNuloException();
                }
                pedidoExpressDto.ClienteId = IdCliente;
                pedidoExpressDto.FechaEntrega = fechaEntrega;
                _altaPedidoExpress.Ejecutar(pedidoExpressDto);

                BorrarViewBagPedido();

                ViewBag.Error = false;
                ViewBag.Mensaje = "Pedido realizado exitosamente.";
            }
            catch (Exception e)
            {
                ViewBag.Error = true;
                ViewBag.Mensaje = e.Message;

            }

            return View("CatalogoExpress", _obtenerArticulos.Ejecutar());


        }

        private PedidoExpressDto GetPedidoExFromSession()
        {
            PedidoExpressDto pedidoExpressDtoRecuperado;

            string? json = HttpContext.Session.GetString("SessionCompraDto");
            if (string.IsNullOrEmpty(json))
            {
                pedidoExpressDtoRecuperado = new PedidoExpressDto();
            }
            else
            {
                pedidoExpressDtoRecuperado = JsonSerializer.Deserialize<PedidoExpressDto>(json);
            }
            return pedidoExpressDtoRecuperado;
        }
        
        private void SetPedidoExToSession(PedidoExpressDto pedidoExpressDto)
        {
            HttpContext.Session.SetString("SessionCompraDto", JsonSerializer.Serialize(pedidoExpressDto));
        }

        private void SetViewBagEx(PedidoExpressDto pedidoExpressDto)
        {
            ViewBag.cantidad = pedidoExpressDto.Cantidad;
            ViewBag.total = pedidoExpressDto.MontoSubtotal;
            ViewBag.catalogo = pedidoExpressDto.Lineas;
        }
        

        // PARTE PEDIDOS COMUNES

        [HttpPost]
        public IActionResult AgregarLineaCom(int idArticulo, int cantidad)
        {
            try
            {
                Articulo articulo = _obtenerArticulo.Ejecutar(idArticulo);


                if (articulo == null)
                {
                    throw new ArticuloPedidoInvalidoException();
                }
                if (cantidad == 0)
                {
                    throw new CantLineaInvalidaException();
                }
                if(cantidad > articulo.Stock)
                {
                    throw new CantLineaInvalidaException();
                }
                PedidoComunDto pedidoDto = GetPedidoComFromSession();
                if (pedidoDto == null)
                {
                    throw new PedidoNuloException();
                }

                var linea = new LineaDto()
                {
                    ArticuloId = articulo.Id,
                    Nombre = articulo.Nombre,
                    Descripcion = articulo.Descripcion,
                    Codigo = articulo.Codigo,
                    CantUnidades = cantidad,
                    PrecioUnitarioVigente = articulo.Precio
                };

                pedidoDto.Lineas.Add(linea); 
                pedidoDto.Cantidad += cantidad;
                pedidoDto.MontoSubtotal += articulo.Precio * cantidad;

                SetViewBagCom(pedidoDto);
                SetPedidoComToSession(pedidoDto);
                ViewBag.Error = false;
                ViewBag.Mensaje = "Artículo agregado exitosamente";
            }
            catch (Exception e)
            {
                ViewBag.Error = true;
                ViewBag.Mensaje = e.Message;
            }
            return View("CatalogoComun", _obtenerArticulos.Ejecutar());
        }

        

        public IActionResult CheckoutCom(int IdCliente, DateTime fechaEntrega)
        {
            Cliente cliente = _obtenerCliente.Ejecutar(IdCliente);

            try
            {
                if (cliente == null)
                {
                    throw new ClientePedidoInvalidaException();
                }

                PedidoComunDto pedidoComunDto = GetPedidoComFromSession();

                if (pedidoComunDto == null)
                {
                    throw new PedidoNuloException();
                }
                pedidoComunDto.ClienteId = IdCliente;
                pedidoComunDto.FechaEntrega = fechaEntrega;
                _altaPedidoComun.Ejecutar(pedidoComunDto);
                BorrarViewBagPedido();

                ViewBag.Error = false;
                ViewBag.Mensaje = "Pedido realizado exitosamente.";

            }
            catch (Exception e)
            {
                ViewBag.Error = true;
                ViewBag.Mensaje = e.Message;
            }

            return View("CatalogoComun", _obtenerArticulos.Ejecutar());


        }

        private PedidoComunDto GetPedidoComFromSession()
        {
            PedidoComunDto pedidoComunDtoRecuperado;

            string? json = HttpContext.Session.GetString("SessionCompraDto");
            if (string.IsNullOrEmpty(json))
            {
                pedidoComunDtoRecuperado = new PedidoComunDto();
            }
            else
            {
                pedidoComunDtoRecuperado = JsonSerializer.Deserialize<PedidoComunDto>(json);
            }
            return pedidoComunDtoRecuperado;
        }

        private void SetPedidoComToSession(PedidoComunDto pedidoComunDto)
        {
            HttpContext.Session.SetString("SessionCompraDto", JsonSerializer.Serialize(pedidoComunDto));
        }

        private void SetViewBagCom(PedidoComunDto pedidoComunDto)
        {
            ViewBag.cantidad = pedidoComunDto.Cantidad;
            ViewBag.total = pedidoComunDto.MontoSubtotal;
            ViewBag.catalogo = pedidoComunDto.Lineas;
        }

        public IActionResult Index(string mensaje)
        {
            ViewBag.Mensaje = mensaje;
            return View();
        }
        public IActionResult BuscarPorFecha(DateTime fechaRealizado)
        {
            try
            {
                if (fechaRealizado == DateTime.MinValue)
                {
                    throw new FechaRealizadoPedidoInvalidaException();
                }
                if (fechaRealizado > DateTime.Now)
                {
                    throw new FechaRealizadoPedidoInvalidaException();
                }

                IEnumerable<PedidoDto> listaPedidos = _obtenerPedidos.Ejecutar(fechaRealizado);

                if (listaPedidos.Count() == 0)
                {
                    throw new ListaPedidosNulaException();
                }
                ViewBag.Error = false;
                
            }
            catch (Exception e)
            {
                ViewBag.Error = true;
                ViewBag.Mensaje = e.Message;

            }

            

            return View("Index", _obtenerPedidos.Ejecutar(fechaRealizado));
        }

        public IActionResult Anular(int id)
        {
            
            try
            {
                if (id == null)
                {
                    throw new PedidoNuloException();
                }

                _anularPedido.Ejecutar(id);
                ViewBag.Error = false;
                ViewBag.Mensaje = "Pedido anulado exitosamente.";
            }
            catch (Exception e)
            {
                ViewBag.Error = true;
                ViewBag.Mensaje = e.Message;
            }

            return View("Index");
        }

        public void BorrarViewBagPedido()
        {
            HttpContext.Session.Remove("SessionCompraDto");
        }
    }
}

***********************************
Archivo: UsuarioController.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\WebApp\Controllers\UsuarioController.cs
***********************************
using LogicaAccesoDatos.Excepciones;
using LogicaNegocio.CarpetaDtos;
using LogicaNegocio.Entidades;
using LogicaNegocio.Excepciones.Articulo;
using LogicaNegocio.Excepciones.Usuario;
using LogicaNegocio.InterfacesServicios;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Text;
using WebApp.Filter;

namespace WebApp.Controllers
{
    public class UsuarioController(
        IAlta<AdminDto> altaUsuario, IEditar<UsuarioDto> editarUsuario, IEliminar<Usuario> eliminarUsuario, IObtener<UsuarioDto> obtenerUsuario, IObtenerTodos<UsuarioDto> obtenerTodos, IObtenerPorDosString<Usuario> obtenerUsuarioPorDosString) : Controller
    {
        IAlta<AdminDto> _altaUsuario = altaUsuario;
        IEditar<UsuarioDto> _editarUsuario = editarUsuario;
        IEliminar<Usuario> _eliminarUsuario = eliminarUsuario;
        IObtener<UsuarioDto> _obtenerUsuario = obtenerUsuario;
        IObtenerTodos<UsuarioDto> _obtenerUsuarios = obtenerTodos;
        IObtenerPorDosString<Usuario> _obtenerUsuarioPorDosString = obtenerUsuarioPorDosString;

        [AdminAutorizado]
        // GET: UsuarioController
        public IActionResult Index(string mensaje)
        {
            ViewBag.mensaje = mensaje;
            return View(_obtenerUsuarios.Ejecutar());
        }

        // GET: UsuarioController/Details/5
        //public ActionResult Details(int id)
        //{
        //    return View();
        //}

        [AdminAutorizado]
        // GET: UsuarioController/Create
        public IActionResult Create()
        {
            return View();
        }

        [AdminAutorizado]
        // POST: UsuarioController/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(AdminDto adminDto)//TODO Ver DTOs
        {
            try
            {
                _altaUsuario.Ejecutar(adminDto);
                return RedirectToAction("Index", new { mensaje = "Usuario creado exitosamente." }); //TODO recibir en view.
            }
            catch (ContraseniaUsuarioInvalidaException e)
            {
                ViewBag.Mensaje = e.Message;
            }
            catch (MailUsuarioInvalidaException e)
            {
                ViewBag.Mensaje = e.Message;
            }
            catch (Exception e)
            {
                ViewBag.Mensaje = e.Message;
            }

            return View(adminDto);
        }

        [AdminAutorizado]
        // GET: UsuarioController/Edit/5
        public IActionResult Edit(int id)
        {
            if (id == null)
            {
                return RedirectToAction("Index");
            }
            UsuarioDto usuarioDto = _obtenerUsuario.Ejecutar(id);

            if (usuarioDto == null)
            {
                return RedirectToAction("Index", new { mensaje = "No se encontró " + id });
            }

            
            return View(usuarioDto);

        }

        [AdminAutorizado]
        // POST: UsuarioController/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Edit(int id, UsuarioDto usuarioDto)
        {
            try
            {
                _editarUsuario.Ejecutar(id, usuarioDto);
                return RedirectToAction("Index");
            }
            catch (Exception e)
            {
                return RedirectToAction("Index", new { mensaje = e.Message });
            }
        }

        [AdminAutorizado]
        // GET: UsuarioController/Delete/5
        public IActionResult Delete(int id)
        {
            if (id == null)
            {
                return RedirectToAction("Index");
            }

            UsuarioDto usuarioDto = _obtenerUsuario.Ejecutar(id);

            if (usuarioDto == null)
            {
                return RedirectToAction("Index", new { mensaje = "No se encontró " + id });
            }
            return View(usuarioDto);
        }

        [AdminAutorizado]
        // POST: UsuarioController/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Delete(UsuarioDto usuarioDto)
        {
            try
            {
                _eliminarUsuario.Ejecutar(usuarioDto.Id);
                return RedirectToAction("Index");
            }
            catch (NotFoundException e)
            {
                return RedirectToAction("Index", new { mensaje = e.Message });
            }
            catch (Exception e)
            {
                return RedirectToAction("Index", new { mensaje = "No se puedo dar de baja. Intente nuevamente." });
            }
        }

        public IActionResult Login()
        {
            return View();
        }

        [HttpPost]
        public IActionResult Login(string Mail, string Contrasenia)
        {
            string contraEncriptada = EncodeStringToBase64(Contrasenia);
            
            try
            {
                Usuario unUsuario = _obtenerUsuarioPorDosString.Ejecutar(Mail, contraEncriptada);

                if (unUsuario is Administrador)
                {
                    HttpContext.Session.SetString("Rol", "Administrador");
                    HttpContext.Session.SetString("Nombre", unUsuario.NombreCompleto.Nombre);

                    return RedirectToAction("Index");
                }
            }
            catch (UsuarioNullException e)
            {
                ViewBag.Mensaje = e.Message;
            }
            catch (Exception e)
            {
                ViewBag.Mensaje = e.Message;
            }

            return View();

        }

        public string EncodeStringToBase64(string stringToEncode)
        {
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(stringToEncode));
        }

        [AdminAutorizado]
        public IActionResult Logout()
        {
            HttpContext.Session.Clear();

            return RedirectToAction("Login", "Usuario");
        }
    }
}

***********************************
Archivo: AdminAutorizado.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\WebApp\Filter\AdminAutorizado.cs
***********************************
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;

namespace WebApp.Filter
{
    public class AdminAutorizado : Attribute, IAuthorizationFilter
    {
        public void OnAuthorization(AuthorizationFilterContext context)
        {
            if(context.HttpContext.Session.GetString("Rol") != "Administrador")
            {
                context.Result = new RedirectResult ("/home/index");
            }
        }
    }
}

***********************************
Archivo: ErrorViewModel.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\WebApp\Models\ErrorViewModel.cs
***********************************
namespace WebApp.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}

***********************************
Archivo: ArticuloConfig.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\EF\Config\ArticuloConfig.cs
***********************************
using LogicaNegocio.Entidades;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.EF.Config
{
    internal class ArticuloConfig : IEntityTypeConfiguration<Articulo>
    {
        public void Configure(EntityTypeBuilder<Articulo> builder)
        {
            builder.HasIndex(a => a.Nombre).IsUnique();
        }
    }
}

***********************************
Archivo: ClienteConfig.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\EF\Config\ClienteConfig.cs
***********************************
using LogicaNegocio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.EF.Config
{
    internal class ClienteConfig : IEntityTypeConfiguration<Cliente>
    {
        public void Configure(EntityTypeBuilder<Cliente> builder)
        {
            builder.OwnsOne(c => c.Direccion, dir =>
            {
                dir.Property(d => d.Calle).HasColumnName("Direccion_calle");
                dir.Property(d => d.Num).HasColumnName("Direccion_num");
                dir.Property(d => d.Ciudad).HasColumnName("Direccion_ciudad");
                dir.Property(d => d.DistanciaPapeleria).HasColumnName("Direccion_distPapeleria");
            }
            );
            builder.HasIndex(c => c.Rut).IsUnique();
        }
    }
}

***********************************
Archivo: PedidoConfig.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\EF\Config\PedidoConfig.cs
***********************************
using LogicaNegocio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.EF.Config
{
    internal class PedidoConfig : IEntityTypeConfiguration<Pedido>
    {
        public void Configure(EntityTypeBuilder<Pedido> builder)
        {
            builder.HasOne(ped => ped.Cliente)
            .WithMany(c => c.Pedidos)
            .HasForeignKey(c => c.ClienteId);

            builder.HasMany(ped => ped.Lineas);

        }
    }
}

***********************************
Archivo: UsuarioConfig.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaAccesoDatos\EF\Config\UsuarioConfig.cs
***********************************
using LogicaNegocio.Entidades;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaAccesoDatos.EF.Config
{
    internal class UsuarioConfig : IEntityTypeConfiguration<Usuario>
    {
        public void Configure(EntityTypeBuilder<Usuario> builder)
        {
            builder.OwnsOne(u => u.NombreCompleto, nom =>
            {
                nom.Property(n => n.Nombre).HasColumnName("NombreCompleto_nombre");
                nom.Property(n => n.Apellido).HasColumnName("NombreCompleto_apellido");
            }
            );

            builder.HasIndex(u => u.Mail).IsUnique();

        }
    }
}

***********************************
Archivo: AdminMapper.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\MapeosDtos\AdminMapper.cs
***********************************
using LogicaNegocio.Entidades;
using LogicaNegocio.ValueObjects;


namespace LogicaNegocio.CarpetaDtos.MapeosDtos
{
    public class AdminMapper
    {
        public static Administrador FromDto(AdminDto adminDto)
        {
            return new Administrador()
            {
                Id = adminDto.Id,
                NombreCompleto = new NombreCompleto(adminDto.Nombre, adminDto.Apellido),
                Mail = adminDto.Mail,
                Contrasenia = adminDto.Contrasenia,
                Discriminator = adminDto.Discriminator,
            };
        }

        public static AdminDto ToDto(Administrador admin)
        {
            return new AdminDto(admin.Id, admin.NombreCompleto.Nombre, admin.NombreCompleto.Apellido, admin.Mail, admin.Contrasenia, admin.Discriminator);
        }

        public static IEnumerable<AdminDto> ToListaDto(IEnumerable<Administrador> admins)
        {
            List<AdminDto> aux = new List<AdminDto>();
            foreach (var admin in admins)
            {
                AdminDto adminDto = AdminMapper.ToDto(admin);
                aux.Add(adminDto);
            }
            return aux;
        }
    }
}

***********************************
Archivo: ArticuloMapper.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\MapeosDtos\ArticuloMapper.cs
***********************************
using LogicaNegocio.Entidades;
using LogicaNegocio.ValueObjects;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.CarpetaDtos.MapeosDtos
{
    public class ArticuloMapper
    {
        public static Articulo FromDto(ArticuloDto articuloDto)
        {
            return new Articulo()
            {
                Id = articuloDto.Id,
                Nombre = articuloDto.Nombre,
                Descripcion = articuloDto.Descripcion,
                Codigo = articuloDto.Codigo,
                Precio = articuloDto.Precio,
                Stock = articuloDto.Stock,
            };
        }
        public static ArticuloDto ToDto(Articulo art)
        {
            return new ArticuloDto(art.Id, art.Nombre, art.Descripcion, art.Codigo, art.Precio, art.Stock);
        }

        public static IEnumerable<ArticuloDto> ToListaDto(IEnumerable<Articulo> articulos)
        {
            List<ArticuloDto> aux = new List<ArticuloDto>();

            foreach (var art in articulos)
            {
                ArticuloDto articuloDto = ToDto(art);
                aux.Add(articuloDto);
            }
            return aux;
        }
    }
}

***********************************
Archivo: ClienteMapper.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\MapeosDtos\ClienteMapper.cs
***********************************
using LogicaNegocio.Entidades;
using LogicaNegocio.Excepciones.Cliente;
using LogicaNegocio.ValueObjects;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.CarpetaDtos.MapeosDtos
{
    public class ClienteMapper
    {
        public static Cliente FromDto(ClienteDto clienteDto)
        {
            return new Cliente()
            {
                Id = clienteDto.Id,
                Rut = clienteDto.Rut,
                RazonSoc = clienteDto.RazonSoc,
                Direccion = new Direccion(clienteDto.Calle, clienteDto.Num, clienteDto.Ciudad, clienteDto.DistanciaPapeleria),
            };
        }

        public static ClienteDto ToDto(Cliente cliente)
        {
            return new ClienteDto(cliente.Id, cliente.Rut, cliente.RazonSoc, cliente.Direccion.Calle, cliente.Direccion.Num, cliente.Direccion.Ciudad, cliente.Direccion.DistanciaPapeleria);

        }

        public static IEnumerable<ClienteDto> ToListaDto(IEnumerable<Cliente> clientes)
        {
            List<ClienteDto> aux = new List<ClienteDto>();

            foreach (var cliente in clientes)
            {
                ClienteDto clienteDto = ToDto(cliente);
                aux.Add(clienteDto);
            }
            return aux;
        }
    }
}

***********************************
Archivo: LineaMapper.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\MapeosDtos\LineaMapper.cs
***********************************
using LogicaNegocio.Entidades;
using LogicaNegocio.ValueObjects;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.CarpetaDtos.MapeosDtos
{
    public class LineaMapper
    {
        public static Linea FromDto(LineaDto lineaDto)
        {
            return new Linea()
            {
                Id = lineaDto.Id,
                ArticuloId = lineaDto.ArticuloId,
                CantUnidades = lineaDto.CantUnidades,
                PrecioUnitarioVigente = lineaDto.PrecioUnitarioVigente,
            };
        }

        public static LineaDto ToDto(Linea linea)
        {
            return new LineaDto(linea.Id, linea.ArticuloId, linea.Articulo.Nombre, linea.Articulo.Descripcion, linea.Articulo.Codigo, linea.CantUnidades, linea.PrecioUnitarioVigente);

        }

        public static IEnumerable<LineaDto> ToListaDto(IEnumerable<Linea> lineas)
        {
            List<LineaDto> aux = new List<LineaDto>();

            foreach (var linea in lineas)
            {
                LineaDto lineaDto = ToDto(linea);
                aux.Add(lineaDto);
            }
            return aux;
        }

        public static List<Linea> FromListaDto(List<LineaDto> lineasDto)
        {
            List<Linea> aux = new List<Linea>();

            foreach (var lineaDto in lineasDto)
            {
                Linea linea = FromDto(lineaDto);
                aux.Add(linea);
            }
            return aux;
        }
    }
}

***********************************
Archivo: PedidoComunMapper.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\MapeosDtos\PedidoComunMapper.cs
***********************************
using LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.CarpetaDtos.MapeosDtos
{
    public class PedidoComunMapper
    {
        public static PedidoComun FromDto(PedidoComunDto pedidoComunDto)
        {
            return new PedidoComun()
            {
                Id = pedidoComunDto.Id,
                FechaRealizado = pedidoComunDto.FechaRealizado,
                ClienteId = pedidoComunDto.ClienteId,
                FechaEntrega = pedidoComunDto.FechaEntrega,
                MontoSubtotal = pedidoComunDto.MontoSubtotal,
                Cantidad = pedidoComunDto.Cantidad,
                Discriminator = pedidoComunDto.Discriminator,
                Lineas = LineaMapper.FromListaDto(pedidoComunDto.Lineas),
            };
        }

        public static PedidoComunDto ToDto(PedidoComun pedidoComun)
        {
            return new PedidoComunDto(pedidoComun.Id, pedidoComun.FechaRealizado, pedidoComun.ClienteId, pedidoComun.FechaEntrega, pedidoComun.MontoSubtotal, pedidoComun.Cantidad, pedidoComun.Discriminator);
        }

        public static IEnumerable<PedidoComunDto> ToListaDto(IEnumerable<PedidoComun> pedidos)
        {
            List<PedidoComunDto> aux = new List<PedidoComunDto>();
            foreach (var pedidoComun in pedidos)
            {
                PedidoComunDto pedidoComunDto = PedidoComunMapper.ToDto(pedidoComun);
                aux.Add(pedidoComunDto);
            }
            return aux;
        }
    }
}

***********************************
Archivo: PedidoExpressMapper.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\MapeosDtos\PedidoExpressMapper.cs
***********************************
using LogicaNegocio.Entidades;
using LogicaNegocio.ValueObjects;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.CarpetaDtos.MapeosDtos
{
    public class PedidoExpressMapper
    {
        public static PedidoExpress FromDto(PedidoExpressDto pedidoExpressDto)
        {
            return new PedidoExpress()
            {
                Id = pedidoExpressDto.Id,
                FechaRealizado = pedidoExpressDto.FechaRealizado,
                ClienteId = pedidoExpressDto.ClienteId,
                FechaEntrega = pedidoExpressDto.FechaEntrega,
                MontoSubtotal = pedidoExpressDto.MontoSubtotal,
                Cantidad = pedidoExpressDto.Cantidad,
                Discriminator = pedidoExpressDto.Discriminator,
                Lineas = LineaMapper.FromListaDto(pedidoExpressDto.Lineas),
            };
        }

        public static PedidoExpressDto ToDto(PedidoExpress pedidoExpress)
        {
            return new PedidoExpressDto(pedidoExpress.Id, pedidoExpress.FechaRealizado, pedidoExpress.ClienteId, pedidoExpress.FechaEntrega, pedidoExpress.MontoTotal, pedidoExpress.Cantidad, pedidoExpress.Discriminator);
        }

        public static IEnumerable<PedidoExpressDto> ToListaDto(IEnumerable<PedidoExpress> pedidos)
        {
            List<PedidoExpressDto> aux = new List<PedidoExpressDto>();
            foreach (var pedidoExpress in pedidos)
            {
                PedidoExpressDto pedidoExpressDto = PedidoExpressMapper.ToDto(pedidoExpress);
                aux.Add(pedidoExpressDto);
            }
            return aux;
        }
    }
}

***********************************
Archivo: PedidoMapper.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\MapeosDtos\PedidoMapper.cs
***********************************
using LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.CarpetaDtos.MapeosDtos
{
    public class PedidoMapper
    {
        public static PedidoDto ToDto(Pedido pedido)
        {
            return new PedidoDto(pedido.Id, pedido.FechaEntrega, pedido.Cliente.RazonSoc, pedido.MontoTotal, pedido.Discriminator);
        }

        public static IEnumerable<PedidoDto> ToListaDto(IEnumerable<Pedido> pedidos)
        {
            List<PedidoDto> aux = new List<PedidoDto>();
            foreach (var pedido in pedidos)
            {
                PedidoDto pedidoDto = PedidoMapper.ToDto(pedido);
                aux.Add(pedidoDto);
            }
            return aux;
        }
    }
}

***********************************
Archivo: UsuarioMapper.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\CarpetaDtos\MapeosDtos\UsuarioMapper.cs
***********************************
using LogicaNegocio.Entidades;
using LogicaNegocio.ValueObjects;


namespace LogicaNegocio.CarpetaDtos.MapeosDtos
{
    public class UsuarioMapper
    {
        public static Usuario FromDto(UsuarioDto usuarioDto)
        {
            return new Usuario()
            {
                Id = usuarioDto.Id,
                NombreCompleto = new NombreCompleto(usuarioDto.Nombre, usuarioDto.Apellido),
                Mail = usuarioDto.Mail,
                Contrasenia = usuarioDto.Contrasenia,
                ContraseniaEncripada = usuarioDto.ContraseniaEncriptada,
                Discriminator = usuarioDto.Discriminator,
            };
        }

        public static UsuarioDto ToDto(Usuario usuario)
        {
            return new UsuarioDto(usuario.Id, usuario.NombreCompleto.Nombre, usuario.NombreCompleto.Apellido, usuario.Mail, usuario.Contrasenia, usuario.ContraseniaEncripada, usuario.Discriminator);
        }

        public static IEnumerable<UsuarioDto> ToListaDto(IEnumerable<Usuario> usuarios)
        {
            List<UsuarioDto> aux = new List<UsuarioDto>();
            foreach (var usuario in usuarios)
            {
                UsuarioDto usuarioDto = UsuarioMapper.ToDto(usuario);
                aux.Add(usuarioDto);
            }
            return aux;
        }
    }
}

***********************************
Archivo: ArticuloException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Articulo\ArticuloException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Articulo
{
    public class ArticuloException : DomainException
    {
        public ArticuloException() { }
        public ArticuloException(string message) : base(message) { }
    }
}

***********************************
Archivo: CodigoArticuloInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Articulo\CodigoArticuloInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Articulo
{
    public class CodigoArticuloInvalidaException : ArticuloException
    {
        public CodigoArticuloInvalidaException() : base ("El código debe tener 13 caracteres.")
        {

        }
    }
}

***********************************
Archivo: DescripcionArticuloInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Articulo\DescripcionArticuloInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Articulo
{
    public class DescripcionArticuloInvalidaException : ArticuloException
    {
        public DescripcionArticuloInvalidaException() : base("La descripción tiene que ser mayor a 5 caracteres.") 
        { 
        
        }
    }
}

***********************************
Archivo: NombreArticuloInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Articulo\NombreArticuloInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Articulo
{
    public class NombreArticuloInvalidaException : ArticuloException
    {
        public NombreArticuloInvalidaException() : base("El nombre no es válido.")
        {

        }
    }
}

***********************************
Archivo: PrecioArticuloInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Articulo\PrecioArticuloInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Articulo
{
    public class PrecioArticuloInvalidaException : ArticuloException
    {
        public PrecioArticuloInvalidaException() : base("El precio debe ser mayor que cero.")
        {

        }
    }
}

***********************************
Archivo: StockArticuloInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Articulo\StockArticuloInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Articulo
{
    public class StockArticuloInvalidaException : ArticuloException
    {
        public StockArticuloInvalidaException() : base("El stock debe ser mayor que cero.")
        {

        }
    }
}

***********************************
Archivo: ClienteException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Cliente\ClienteException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Cliente
{
    public class ClienteException : DomainException
    {
        public ClienteException() { }
        public ClienteException(string message) : base(message) { }
    }
}

***********************************
Archivo: DireccionClienteInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Cliente\DireccionClienteInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Cliente
{
    public class DireccionClienteInvalidaException : ClienteException
    {
        public DireccionClienteInvalidaException() : base ("Ingrese una dirección válida.")
        { }
    }
}

***********************************
Archivo: RazonSocClienteInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Cliente\RazonSocClienteInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Cliente
{
    public class RazonSocClienteInvalidaException : ClienteException
    {
        public RazonSocClienteInvalidaException() : base("La razón social no puede estar vacía.") 
        {
            
        }
    }
}

***********************************
Archivo: RutClienteInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Cliente\RutClienteInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Cliente
{
    public class RutClienteInvalidaException : ClienteException
    {
        public RutClienteInvalidaException() : base("El RUT no puede estar vacío.") 
        { }
    }
}

***********************************
Archivo: ArticuloLineaInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Linea\ArticuloLineaInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Linea
{
    public class ArticuloLineaInvalidaException : LineaException
    {
        public ArticuloLineaInvalidaException() : base("Ingrese un artículo.") { }
    }
}

***********************************
Archivo: CantLineaInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Linea\CantLineaInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Linea
{
    public class CantLineaInvalidaException : LineaException
    {
        public CantLineaInvalidaException(): base("Ingrese una cantidad válida.") { }
    }
}

***********************************
Archivo: LineaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Linea\LineaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Linea
{
    public class LineaException : DomainException
    {
        public LineaException() { }
        public LineaException(string message) : base(message) { }
    }
}

***********************************
Archivo: PrecioLineaInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Linea\PrecioLineaInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Linea
{
    public class PrecioLineaInvalidaException : LineaException
    {
        public PrecioLineaInvalidaException() : base("Ingrese un precio válido.") { }
    }
}

***********************************
Archivo: ArticuloPedidoInvalidoException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Pedido\ArticuloPedidoInvalidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Pedido
{
    public class ArticuloPedidoInvalidoException : PedidoException
    {
        public ArticuloPedidoInvalidoException() : base("Seleccione un artículo.") { }
    }
}

***********************************
Archivo: ClientePedidoInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Pedido\ClientePedidoInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Pedido
{
    public class ClientePedidoInvalidaException : PedidoException
    {
        public ClientePedidoInvalidaException() : base ("Ingrese un cliente válido.") { }
    }
}

***********************************
Archivo: FechaRealizadoPedidoInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Pedido\FechaRealizadoPedidoInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Pedido
{
    public class FechaRealizadoPedidoInvalidaException : PedidoException
    {
        public FechaRealizadoPedidoInvalidaException() : base ("Ingrese una fecha válida.")
        {
        
        }

    }
}

***********************************
Archivo: FechaRecibidoPedidoInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Pedido\FechaRecibidoPedidoInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Pedido
{
    public class FechaRecibidoPedidoInvalidaException : PedidoException
    {
        public FechaRecibidoPedidoInvalidaException() : base ("Ingrese una fecha válida.") { }
    }
}

***********************************
Archivo: LineaPedidoInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Pedido\LineaPedidoInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Pedido
{
    public class LineaPedidoInvalidaException : PedidoException
    {
        public LineaPedidoInvalidaException() : base("Agregue un articulo.") 
        {

        }
    }
}

***********************************
Archivo: ListaPedidosNulaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Pedido\ListaPedidosNulaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Pedido
{
    public class ListaPedidosNulaException : PedidoException
        {
            public ListaPedidosNulaException() : base("No hay pedidos para mostrar.") { }
        }
    }

***********************************
Archivo: PedidoException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Pedido\PedidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Pedido
{
    public class PedidoException : DomainException
    {
        public PedidoException
            () { }
        public PedidoException(string message) : base(message) { }
    }
}

***********************************
Archivo: PedidoNuloException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Pedido\PedidoNuloException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Pedido
{
    public class PedidoNuloException : PedidoException
    {
        public PedidoNuloException(): base("No se pudo recuperar el pedido.") { }
    }
}

***********************************
Archivo: PlazoComunPedidoInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Pedido\PlazoComunPedidoInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Pedido
{
    internal class PlazoComunPedidoInvalidaException : PedidoException
    {
        public PlazoComunPedidoInvalidaException() : base("La fecha de entrega debe ser por lo menos 7 días después de realizado.") { }
    }
}

***********************************
Archivo: PlazoExpressPedidoInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Pedido\PlazoExpressPedidoInvalidaException.cs
***********************************
using LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Pedido
{
    internal class PlazoExpressPedidoInvalidaException : PedidoException
    {
        public PlazoExpressPedidoInvalidaException() : base($"La fecha de entrega no puede superar los {ParametrosGenerales.Plazo} días.") { }
    }
}

***********************************
Archivo: ContraseniaUsuarioInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Usuario\ContraseniaUsuarioInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Usuario
{
    public class ContraseniaUsuarioInvalidaException : UsuarioException
    {
        public ContraseniaUsuarioInvalidaException() : base("La contraseña no es válida.") { }
    }
}

***********************************
Archivo: MailUsuarioInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Usuario\MailUsuarioInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Usuario
{
    public class MailUsuarioInvalidaException : UsuarioException
    {
        public MailUsuarioInvalidaException() : base("El correo no puede estar vacío y debe tener formato adecuado.") { }
        
    }
}

***********************************
Archivo: UsuarioException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Usuario\UsuarioException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Usuario
{
    public class UsuarioException : DomainException
    {
        public UsuarioException() { }
        public UsuarioException(string message) : base(message) { }
    }
}

***********************************
Archivo: UsuarioNullException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\Usuario\UsuarioNullException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.Usuario
{
    public class UsuarioNullException : UsuarioException
    {
        public UsuarioNullException() : base("Datos incorrectos.")
        { }
    }
}

***********************************
Archivo: CalleDireccionInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\ValueObjects\Direccion\CalleDireccionInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.ValueObjects.Direccion
{
    public class CalleDireccionInvalidaException : DireccionException
    {
        public CalleDireccionInvalidaException() : base("La calle no puede estar vacía.") { }
    }
}

***********************************
Archivo: CiudadDireccionInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\ValueObjects\Direccion\CiudadDireccionInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.ValueObjects.Direccion
{
    public class CiudadDireccionInvalidaException : DireccionException
    {
        public CiudadDireccionInvalidaException() : base("La ciudad no puede estar vacia.") { }
    }
}

***********************************
Archivo: DireccionException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\ValueObjects\Direccion\DireccionException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.ValueObjects.Direccion
{
    public class DireccionException : DomainException
    {
        public DireccionException() { }
        public DireccionException(string message) : base(message) { }
    }
}

***********************************
Archivo: DistanciaDireccionInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\ValueObjects\Direccion\DistanciaDireccionInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.ValueObjects.Direccion
{
    public class DistanciaDireccionInvalidaException : DireccionException
    {
        public DistanciaDireccionInvalidaException() : base("La distancia a la papelería no puede ser menor a 0.") { }
    }
}

***********************************
Archivo: NumDireccionInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\ValueObjects\Direccion\NumDireccionInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.ValueObjects.Direccion
{
    public class NumDireccionInvalidaException : DireccionException
    {
        public NumDireccionInvalidaException() : base("El número no puede estar vacio.") { }
    }
}

***********************************
Archivo: ApellidoNombreCompletoInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\ValueObjects\NombreCompleto\ApellidoNombreCompletoInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.ValueObjects.NombreCompleto
{
    internal class ApellidoNombreCompletoInvalidaException : NombreCompletoException
    {
        public ApellidoNombreCompletoInvalidaException() : base("Ingrese un apellido válido.") { }
    }
}

***********************************
Archivo: NombreCompletoException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\ValueObjects\NombreCompleto\NombreCompletoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.ValueObjects.NombreCompleto
{
    internal class NombreCompletoException : DomainException
    {
        public NombreCompletoException() { }
        public NombreCompletoException(string message) : base(message) { }
    }
}

***********************************
Archivo: NombreNombreCompletoInvalidaException.cs
Carpeta: C:\Users\Lucia\Documents\GitHub\Obligatorio-1-P3v2\Obligatorio-P3\LogicaNegocio\Excepciones\ValueObjects\NombreCompleto\NombreNombreCompletoInvalidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogicaNegocio.Excepciones.ValueObjects.NombreCompleto
{
    internal class NombreNombreCompletoInvalidaException : NombreCompletoException
    {
        public NombreNombreCompletoInvalidaException() : base("Ingrese un nombre válido.") { }
    }
}
